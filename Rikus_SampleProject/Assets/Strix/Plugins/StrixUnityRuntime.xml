<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StrixUnityRuntime</name>
    </assembly>
    <members>
        <member name="T:AuthTokenResponse">
            <summary>
            Data class holding the authorization server response information.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.ConnectionArgs">
            <summary>
            Connection arguments used to establish a connection
            with a Strix Master server or a Strix room server.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.ConnectionArgs.Host">
            <summary>
            Domain name or IP address of the server.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.ConnectionArgs.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.ConnectionArgs.Path">
            <summary>
            Optional path. Used in WebSocket connections.
            Ignored in other types of connections.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.ConnectionArgs.Protocol">
            <summary>
            Protocol used to connect to the server. Can only be one of the following:
            TCP, UDP, WEB_SOCKET, WEB_SOCKET_SECURE.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.ConnectionArgs.FromUrlParseResult(SoftGear.Strix.Unity.Runtime.UrlParseResult,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:SoftGear.Strix.Unity.Runtime.ConnectionArgs"/>
            from connection string parsing results and a port, validating them in the process.
            </summary>
            <param name="urlParseResult">Result of the connection string parsing.</param>
            <param name="port">Port number. Used only when scheme is not specified.</param>
            <returns>Valid connection arguments.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if connection string parsing results could not be validated.</exception>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.InvalidConnectionArgsException">
            <summary>
            Thrown when connection string cannot be validated.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.InvalidConnectionArgsException.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:SoftGear.Strix.Unity.Runtime.InvalidConnectionArgsException"/> with a specific message.
            </summary>
            <param name="message">Description of the validation failure.</param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException">
            <summary>
            Exception class holding the Strix error code.
            </summary>
            <remarks>
            To get a name and a description from the error code, you can use <see cref="M:SoftGear.Strix.Client.Core.Error.ErrorCode.GetErrorCodeName(System.Int32)"/> and <see cref="M:SoftGear.Strix.Client.Core.Error.ErrorCode.GetErrorDescription(System.Int32)"/> respectively.
            Alternatively, you can use <see cref="P:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException.Message"/> to get the code and the error name in string format.
            </remarks>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException.errorCode">
            <summary>
            Error code
            </summary>
            <remarks>
            To get a name and a description from the error code, you can use <see cref="M:SoftGear.Strix.Client.Core.Error.ErrorCode.GetErrorCodeName(System.Int32)"/> and <see cref="M:SoftGear.Strix.Client.Core.Error.ErrorCode.GetErrorDescription(System.Int32)"/> respectively.
            Alternatively, you can use <see cref="P:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException.Message"/> to get the code and the error name in string format.
            </remarks>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException.Message">
            <summary>
            Error code combined with the error name in string format.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler"/> event handler.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventArgs.session">
            <summary>
            Reference to a server session the request belongs to.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler"/> event handler.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventArgs.session">
            <summary>
            Reference to a server session the failed request belongs to.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventArgs.cause">
            <summary>
            Exception object representing the reason why the request failed.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkCloseEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkCloseEventHandler"/> event handler.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkCloseEventArgs.session">
            <summary>
            Reference to a server session the request belongs to.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkErrorEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkErrorEventHandler"/> event handler.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkErrorEventArgs.session">
            <summary>
            Reference to a server session the failed request belongs to.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkErrorEventArgs.cause">
            <summary>
            Exception object representing the reason why the request failed.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler"/> event handler.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventArgs.roomInfoCollection">
            <summary>
            A collection of found rooms.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomSetEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomDeleteEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomDeleteEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomLeaveEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomLeaveEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberGetEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberGetEventHandler"/> event handler.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.RoomMemberGetEventArgs.roomMemberCollection">
            <summary>
            A collection of room members.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberSetEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberSetEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomRelayEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomRelayEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomDirectRelayEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomDirectRelayEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberKickEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberKickEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.JoinRandomRoomEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.JoinRandomRoomEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventArgs">
            <summary>
            Provides data for the <see cref="T:SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventHandler"/> event handler.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs">
            <summary>
            Failure event arguments.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.session">
            <summary>
            Reference to a server session the failed request belongs to.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause">
            <summary>
            Exception object representing the reason why the request failed.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler">
            <summary>
            Represents a method that executes when establishing a connection finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler">
            <summary>
            And event handler for connection establishment failure.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkCloseEventHandler">
            <summary>
            An event handler for connection closing.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkErrorEventHandler">
            <summary>
            An event handler for network errors.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler">
            <summary>
            Represents a method that executes when a room search finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventHandler">
            <summary>
            Represents a method that executes when creating a room properties finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler">
            <summary>
            Represents a method that executes when changing room properties finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomDeleteEventHandler">
            <summary>
            Represents a method that executes when deleting a room finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler">
            <summary>
            Represents a method that executes when joining a room finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomLeaveEventHandler">
            <summary>
            Represents a method that executes when leaving a room finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberGetEventHandler">
            <summary>
            Represents a method that executes when getting room member information finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberSetEventHandler">
            <summary>
            Represents a method that executes when setting room member properties finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomRelayEventHandler">
            <summary>
            Represents a method that executes when sending a room relay message finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomDirectRelayEventHandler">
            <summary>
            Represents a method that executes when sending a direct relay message to a room member finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RoomMemberKickEventHandler">
            <summary>
            Represents a method that executes when kicking a room member finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.JoinRandomRoomEventHandler">
            <summary>
            Represents a method that executes when joining a random room finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventHandler">
            <summary>
            Represents a method that executes when an RPC call finishes successfully.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler">
            <summary>
            Represents a method that executes when a request fails.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Movement.LocalMovementSynchronizer">
            <summary>
            Class managing local object movement synchronization.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Movement.MovementSynchronizer">
            <summary>
            A common interface for movement synchronizers.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Movement.RemoteMovementSynchronizer">
            <summary>
            Class managing remote object movement synchronization.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Replica.ReplicatorManager">
            <summary>
            Class managing the object replication.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.RoomInfo">
            <summary>
            Class holding a room description.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.name">
            <summary>
            Name of the match room.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.capacity">
            <summary>
            Maximum possible number of members in the room.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.memberCount">
            <summary>
            Current number of members in the room.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.state">
            <summary>
            A custom integer value set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.isJoinable">
            <summary>
            A flag set by the owner to determine if it's currently allowed for the new members to join the room.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key1">
            <summary>
            A custom double value number 1 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key2">
            <summary>
            A custom double value number 2 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key3">
            <summary>
            A custom double value number 3 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key4">
            <summary>
            A custom double value number 4 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key5">
            <summary>
            A custom double value number 5 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key6">
            <summary>
            A custom double value number 6 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key7">
            <summary>
            A custom double value number 7 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.key8">
            <summary>
            A custom double value number 8 set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.stringKey">
            <summary>
            A custom string value set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.properties">
            <summary>
            Custom properties set for this room by the owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.nodeProperties">
            <summary>
            Custom properties of this room's node on the master server.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.nodeUid">
            <summary>
            Node's UID.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.host">
            <summary>
            Address of the room server this room belongs to.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.port">
            <summary>
            Port of the room server this room belongs to.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.protocol">
            <summary>
            Protocol used to connect to the room server this room belongs to.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.nodeType">
            <summary>
            Room node type.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.roomId">
            <summary>
            Room ID on the given room server.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomInfo.isPasswordProtected">
            <summary>
            Determines if you need to provide a correct password to join this room.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.RoomJoinArgs">
            <summary>
            Data class containing all the parameters necessary to join the match room.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.host">
            <summary>
            Address of the room server the match room belongs to.
            Usually, you can get it from <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.host"/> in <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">StrixNetwork.SearchRoom</see> results.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.port">
            <summary>
            Port of the room server the match room belongs to.
            Usually, you can get it from <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.port"/> in <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">StrixNetwork.SearchRoom</see> results.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.protocol">
            <summary>
            Protocol used to connect to the room server the match room belongs to.
            Usually, you can get it from <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.protocol"/> in <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">StrixNetwork.SearchRoom</see> results.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.roomId">
            <summary>
            The ID of the match room on the room server.
            Usually, you can get it from <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.roomId"/> in <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">StrixNetwork.SearchRoom</see> results.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.password">
            <summary>
            If the room is password-protected this password should match the currently set one, in order to join.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.authUrl">
            <summary>
            Authorization server URL that is used on the server to check if a member is authorized to connect to a room server.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.memberProperties">
            <summary>
            Properties assigned to the room member after joining.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.RoomMemberProperties">
            <summary>
            Data class used to set properties for a room member.
            </summary>
            <remarks>
            Can be used either when joining a match room or to change member properties in the course of a match.
            </remarks>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomMemberProperties.name">
            <summary>
            Room member name.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomMemberProperties.properties">
            <summary>
            Custom room member properties. Can be used to store any data related to the room member.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.RoomProperties">
            <summary>
            Data class used to set room properties.
            </summary>
            <remarks>
            Use this to define match room parameters such as room name, maximum number of members, password, etc.
            You can also define custom values <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1"/>, ...,  <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key8"/>, and <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.stringKey"/> that can be used later in a condition for <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SearchRoom</see>.
            </remarks>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.name">
            <summary>
            The name of the room.<br/>
            You can set the name when creating the room or change it later using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoom(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object},SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SetRoom</see> if you are the room's owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.capacity">
            <summary>
            Maximum number of room members. This value gets clamped to [minRoomCapacity, maxRoomCapacity] range as configured on the server. If not specified, 4 is used by default.<br/>
            You can set the capacity when creating a match room or change it later using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoom(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object},SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SetRoom</see> if you are the room's owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.password">
            <summary>
            Room entry password. If set, new players must provide a matching password to join the room. Empty by default.<br/>
            You can set the password when creating a match room or change it later using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoom(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object},SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SetRoom</see> if you are the room's owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.state">
            <summary>
            An integer value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.isJoinable">
            <summary>
            Determines if new players are allowed to join the room; <see langword="true"/> by default.<br/>
            You can make the room unjoinable when creating it or change the joinability later using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoom(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object},SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SetRoom</see> if you are the room's owner.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key2">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key3">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key4">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key5">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key6">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key7">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key8">
            <summary>
            An arbitrary double value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.stringKey">
            <summary>
            An arbitrary string value that can be used for application's own purposes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.RoomProperties.properties">
            <summary>
            A dictionary of custom properties. Can be used to store any data related to the room.
            These properties are not available for search.
            </summary>
            <remarks>
            If you need a custom property that can be searched for with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SearchRoom</see>, use <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1"/>, ..., <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key8"/>, and <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.stringKey"/>.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Rpc.RpcManager">
            <summary>
            Class managing RPC calls.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Rpc.RpcMessage">
            <summary>
            Data class representing RPC message data.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Session.AbstractSession">
            <summary>
            An abstract class representing a server session.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.host">
            <summary>
            The address of the remote server.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.port">
            <summary>
            The remote server port number.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.protocol">
            <summary>
            The protocol used to connect to the remote server.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.applicationId">
            <summary>
            An ID used to identify the application in the Strix Cloud.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.authorizationAccessToken">
            <summary>
            Authorization access token. If not null or empty, used to authorize this client when connecting to the server.<br/>
            To use it you should also provide a valid authorization server URL to <see cref="M:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.Connect(System.String,System.Int32,System.String,System.String,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler,System.Int32)"/>, or <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.JoinRoom(SoftGear.Strix.Unity.Runtime.RoomJoinArgs,SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)"/> through <see cref="T:SoftGear.Strix.Unity.Runtime.RoomJoinArgs"/>.
            </summary>
        </member>
        <member name="E:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.Connected">
             <summary>
             Fired when the connection is established successfully.
             </summary>
             <example>
               <code>
                 public void ConnectedEventSample(string applicationId, string host, string playerName)
                 {
                     StrixNetwork.instance.roomSession.Connected += args =&gt; {
                         Debug.Log(&quot;Room session connection has been established with the following host: &quot;
                             + args.session.host
                             + &quot;:&quot; + args.session.port
                         );
                     };
            
                     StrixNetwork.instance.applicationId = applicationId;
                     StrixNetwork.instance.ConnectMasterServer(
                         host: host,
                         connectEventHandler: _ =&gt; {
                             StrixNetwork.instance.JoinRandomRoom(
                                 playerName,
                                 handler: joinRoomResult =&gt; { },
                                 failureHandler: joinRoomError =&gt; {
                                     StrixNetwork.instance.CreateRoom(
                                         new RoomProperties {
                                             name = &quot;New Room&quot;,
                                             capacity = 4,
                                         },
                                         new RoomMemberProperties {
                                             name = playerName
                                         },
                                         createRoomResult =&gt; { },
                                         createRoomError =&gt; Debug.LogError(
                                             &quot;Could not join nor create a room.&quot;
                                             + &quot; Reasons: &quot; + joinRoomError.cause
                                             + &quot;; &quot; + createRoomError.cause
                                         )
                                     );
                                 });
                         },
                         errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                     );
                 }
               </code>
             </example>
        </member>
        <member name="E:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.ConnectFailed">
            <summary>
            Fired when establishing the connection fails.
            </summary>
        </member>
        <member name="E:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.Closed">
            <summary>
            Fired when the connection is closed.
            </summary>
        </member>
        <member name="E:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.ErrorThrown">
            <summary>
            Fired when a network error happens.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.IsConnected">
            <summary>
            <see langword="true"/> if the connection is currently open; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.Connect(System.String,System.Int32,System.String,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler,System.Int32)">
            <summary>
            Establishes a connection with a remote server.
            </summary>
            <remarks>
            If the connection with another host is already established, it will be closed before opening a new one.
            </remarks>
            <param name="host">The address of the remote server. Can be either URL, IPv4 address, or IPv6 address.</param>
            <param name="port">The port number of the remote server. Must be between 1 and 65535.</param>
            <param name="protocol">The protocol used to connect to the remote server. If this parameter is <c>"UDP"</c> (upper case), then UDP protocol is used. Otherwise, TCP is used.</param>
            <param name="connectEventHandler">This callback is invoked when the connection to the remote server has been established successfully.</param>
            <param name="errorEventHandler">This callback is invoked when the connection could not be established.</param>
            <param name="timeout">Timeout for establishing the connection. Currently doesn't work.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.Connect(System.String,System.Int32,System.String,System.String,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler,System.Int32)">
            <summary>
            Establishes a connection with a remote server.
            </summary>
            <remarks>
            If the connection with another host is already established, it will be closed before opening a new one.
            </remarks>
            <param name="host">The address of the remote server. Can be either URL, IPv4 address, or IPv6 address.</param>
            <param name="port">The port number of the remote server. Must be between 1 and 65535.</param>
            <param name="protocol">The protocol used to connect to the remote server. If this parameter is "UDP" (upper case), then UDP protocol is used. Otherwise, TCP is used.</param>
            <param name="authUrl">Authorization server URL. If not null or empty, and authorization token is provided, used to authorize this client when connecting to the room server.</param>
            <param name="connectEventHandler">This callback is invoked when the connection to the remote server has been established successfully.</param>
            <param name="errorEventHandler">This callback is invoked when the connection could not be established.</param>
            <param name="timeout">Timeout for establishing the connection. Currently doesn't work.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.Session.AbstractSession.Disconnect">
            <summary>
            Closes the connection to the remote server if it is open.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Session.MasterSession">
            <summary>
            A class representing a master server session.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Session.ReconnectableMessageChannel">
            <summary>
            MessageChannel that automatically reconnects with the server if the connection is lost.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Session.ReconnectableMessageChannelProcessor">
            <summary>
            MessageChannelProcessor that automatically reconnects with the server if the connection is lost.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Session.RoomSession">
            <summary>
            A class representing a room server session.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.RoomSession.room">
            <summary>
            Represents the match room you are currently joined to.
            See <see cref="T:SoftGear.Strix.Client.Match.Room.Model.CustomizableMatchRoom"/> for a list of possible information you can get.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.RoomSession.roomMembers">
            <summary>
            A list of all members in the match room that you are currently joined to.<br/>
            For Strix Network the room members will always be of type <see cref="T:SoftGear.Strix.Client.Match.Room.Model.CustomizableMatchRoomMember"/>.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.Session.RoomSession.selfRoomMember">
            <summary>
            Represents your own room member when you are joined to a match room.
            You can use this to get the information about your own member such as ID, name, and custom properties. See <see cref="T:SoftGear.Strix.Client.Match.Room.Model.CustomizableMatchRoomMember"/>.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixAnimationSynchronizer">
            <summary>
            Component that enables animation synchronization.
            </summary>
            <remarks>
            Adding this component to an object will enable automatic animation synchronization.
            Animation synchronization is performed by synchronizing <see href="https://docs.unity3d.com/ScriptReference/Animator.html">Animator</see>'s state and parameters.
            <para>
            You can uncheck some of the parameters in the inspector to disable their synchronization.
            This may be useful in situations when parameters can be set locally based on some conditions like character being grounded.
            </para>
            </remarks>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixAnimationSynchronizer.Animator">
            <summary>
            Unity <see href="https://docs.unity3d.com/ScriptReference/Animator.html">Animator</see> reference.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixAnimationSynchronizer.SynchronizeStates">
            <summary>
            If set to <see langword="true"/>, will synchronize Mecanim states.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixAnimationSynchronizer.ParameterSynchronizationFlags">
            <summary>
            A list of flags that determine whether specific animation parameters should be synchronized or not.
            </summary>
            <remarks>
            Each of the elements here corresponds to a parameter in <see href="https://docs.unity3d.com/ScriptReference/Animator-parameters.html">Animator.parameters</see>.
            Although you can set these through code, there's a custom inspector in Strix Unity SDK that allows you to modify the list in a more user-friendly way.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixBehaviour">
            <summary>
            Base class for all the objects that plan to use Strix features.
            </summary>
            <remarks>
            Using StrixBehaviour as a base class for your scripts instead of <see href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.html">MonoBehaviour</see>
            will enable Strix features such as replication, synchronization, and RPC.
            </remarks>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.strixReplicator">
            <summary>
            Reference to a <see cref="T:SoftGear.Strix.Unity.Runtime.StrixReplicator"/> this <see cref="T:SoftGear.Strix.Unity.Runtime.StrixBehaviour"/> is registered with.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.isLocal">
            <summary>
            <see langword="true"/> if you are the owner of the object; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.isSync">
            <summary>
            <see langword="true"/> if you are the owner of the object and the object is being synchronized over network; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">
            <summary>
            This method is called when Strix serialization is performed.
            </summary>
            <remarks>
            By default it serializes all the fields marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute" /> attribute.
            You can override this method along with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)" /> to add custom serialization logic.
            Although, don't forget to call the base method if you need <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute" /> to work.
            </remarks>
            <example>
<para>
In this example we use <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> to synchronize a game object's scale.
StrixSerializationProperties does not support custom classes and structures such as <see href="https://docs.unity3d.com/ScriptReference/Vector3.html">Vector3</see> so we will serialize <c>x</c>, <c>y</c>, and <c>z</c> separately.
</para>
<para>
First, in Start method we register readable names for the scale vector component using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)" />.
It is recommended to use negative index values,
because we need to avoid collisions with the property indexes defined by Strix,
and Strix libraries use positive values.
In order to minimize network packet size, we want to use values with the smallest absolute values possible.
We choose <c>-1</c>, <c>-2</c>, and <c>-3</c> in this example.
</para>
<para>
In Update we check if we are the owner of the object using <see cref="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.isSync" />. If yes, then we change the local scale of the object based on the movement of the mouse wheel.
Then we override both <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see>, and use them to write and read the scale values.
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> is called on the object owner's client with the frequency defined by <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.sendRate">sendRate</see> of <see cref="T:SoftGear.Strix.Unity.Runtime.StrixReplicator" /> attached to this object.
In it we take the current local scale values and put them into the serialization properties storage using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" /> and the string keys <c>"Scale X"</c>, <c>"Scale Y"</c>, and <c>"Scale Z"</c> that we have registered in the Start method.
On the other clients,
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> is called
where we read the values back with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.String,``0@)" /> and apply them to the transform.
</para>
<para>
As an option, we could have also used <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.Int32,System.Object,System.String)" />
and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.Int32,``0@)" /> overloads
and <c>-1</c>, <c>-2</c>, and <c>-3</c> values directly,
instead of registering them with string keys beforehand.
</para>
<code>
<![CDATA[
using SoftGear.Strix.Unity.Runtime;
using UnityEngine;

public class StrixSerializeExample : StrixBehaviour
{
    private void Start()
    {
        StrixSerializationProperties.RegisterIndexOfProperty("Scale X", -1);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Y", -2);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Z", -3);
    }

    private void Update()
    {
        if (isSync) {
            if (Input.mouseScrollDelta.y > 0)
                transform.localScale *= 1.1f;
            else if (Input.mouseScrollDelta.y < 0)
                transform.localScale /= 1.1f;
        }
    }

    public override void OnStrixSerialize(StrixSerializationProperties properties)
    {
        properties.Set("Scale X", transform.localScale.x);
        properties.Set("Scale Y", transform.localScale.y);
        properties.Set("Scale Z", transform.localScale.z);

        base.OnStrixSerialize(properties);
    }

    public override void OnStrixDeserialize(StrixSerializationProperties properties)
    {
        base.OnStrixDeserialize(properties);

        float x = 0f, y = 0f, z = 0f;
        properties.Get("Scale X", ref x);
        properties.Get("Scale Y", ref y);
        properties.Get("Scale Z", ref z);

        transform.localScale = new Vector3(x, y, z);
    }
}
]]>
</code>
</example>
            <param name="properties">Storage for all serialized values. You can use this to serialize custom values with a <see langword="string" /> or <see langword="int" /> key.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">
            <summary>
            This method is called when Strix deserialization is performed.
            </summary>
            <remarks>
            By default it serializes all the fields marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute" /> attribute.
            You can override this method along with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)" /> to add custom serialization logic.
            Although, don't forget to call the base method if you need <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute" /> to work.
            </remarks>
            <example>
<para>
In this example we use <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> to synchronize a game object's scale.
StrixSerializationProperties does not support custom classes and structures such as <see href="https://docs.unity3d.com/ScriptReference/Vector3.html">Vector3</see> so we will serialize <c>x</c>, <c>y</c>, and <c>z</c> separately.
</para>
<para>
First, in Start method we register readable names for the scale vector component using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)" />.
It is recommended to use negative index values,
because we need to avoid collisions with the property indexes defined by Strix,
and Strix libraries use positive values.
In order to minimize network packet size, we want to use values with the smallest absolute values possible.
We choose <c>-1</c>, <c>-2</c>, and <c>-3</c> in this example.
</para>
<para>
In Update we check if we are the owner of the object using <see cref="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.isSync" />. If yes, then we change the local scale of the object based on the movement of the mouse wheel.
Then we override both <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see>, and use them to write and read the scale values.
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> is called on the object owner's client with the frequency defined by <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.sendRate">sendRate</see> of <see cref="T:SoftGear.Strix.Unity.Runtime.StrixReplicator" /> attached to this object.
In it we take the current local scale values and put them into the serialization properties storage using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" /> and the string keys <c>"Scale X"</c>, <c>"Scale Y"</c>, and <c>"Scale Z"</c> that we have registered in the Start method.
On the other clients,
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> is called
where we read the values back with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.String,``0@)" /> and apply them to the transform.
</para>
<para>
As an option, we could have also used <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.Int32,System.Object,System.String)" />
and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.Int32,``0@)" /> overloads
and <c>-1</c>, <c>-2</c>, and <c>-3</c> values directly,
instead of registering them with string keys beforehand.
</para>
<code>
<![CDATA[
using SoftGear.Strix.Unity.Runtime;
using UnityEngine;

public class StrixSerializeExample : StrixBehaviour
{
    private void Start()
    {
        StrixSerializationProperties.RegisterIndexOfProperty("Scale X", -1);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Y", -2);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Z", -3);
    }

    private void Update()
    {
        if (isSync) {
            if (Input.mouseScrollDelta.y > 0)
                transform.localScale *= 1.1f;
            else if (Input.mouseScrollDelta.y < 0)
                transform.localScale /= 1.1f;
        }
    }

    public override void OnStrixSerialize(StrixSerializationProperties properties)
    {
        properties.Set("Scale X", transform.localScale.x);
        properties.Set("Scale Y", transform.localScale.y);
        properties.Set("Scale Z", transform.localScale.z);

        base.OnStrixSerialize(properties);
    }

    public override void OnStrixDeserialize(StrixSerializationProperties properties)
    {
        base.OnStrixDeserialize(properties);

        float x = 0f, y = 0f, z = 0f;
        properties.Get("Scale X", ref x);
        properties.Get("Scale Y", ref y);
        properties.Get("Scale Z", ref z);

        transform.localScale = new Vector3(x, y, z);
    }
}
]]>
</code>
</example>
            <param name="properties">Storage for all serialized values. You can use this to get custom values that were stored in <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)" /> method, based on a <see langword="string" /> or <see langword="int" /> key.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.Rpc(System.String,System.Object[])">
            <summary>
            Calls an RPC on the room member who owns the object.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            Target member must be in the same match room as you.
            </remarks>
            <example>
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            using UnityEngine.UI;
            
            public class StrixRpcExample : StrixBehaviour
            {
                [StrixSyncField]
                public int Health = 100;
                public Image HealthBar;
            
                private void OnMouseDown()
                {
                    Rpc(&quot;Hit&quot;, Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage)
                {
                    Health = Mathf.Max(0, Health - damage);
                }
            
                public void Update()
                {
                    HealthBar.fillAmount = Health / 100f;
                }
            }
            </code>
            </example>
            <param name="rpcName">RPC method name.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.Rpc(System.String,SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,System.Object[])">
            <summary>
            Calls an RPC on the room member who owns the object.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            Target member must be in the same match room as you.
            <br/><br/>
            <b>Possible error codes:</b>
              <list type="table">
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                  <description>Server did not respond within the specified timeout interval.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                  <description>You're trying to send an RPC message while not being joined to a room.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                  <description>Failed to send the request because of a connection error.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Replica.Error.ReplicaErrorCode.ReplicaNotSynchronized"/></term>
                  <description>The object is not being synchronized over the network.</description>
                </item>
              </list>
            </remarks>
            <example>
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            using UnityEngine.UI;
            
            public class StrixRpcExample : StrixBehaviour
            {
                [StrixSyncField]
                public int Health = 100;
                public Image HealthBar;
            
                private void OnMouseDown()
                {
                    Rpc(&quot;Hit&quot;, error =&gt; Debug.LogError(&quot;Could not call RPC:&quot; + error.cause), Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage)
                {
                    Health = Mathf.Max(0, Health - damage);
                }
            
                public void Update()
                {
                    HealthBar.fillAmount = Health / 100f;
                }
            }
            </code>
            </example>
            <param name="rpcName">RPC method name.</param>
            <param name="successHandler">This handler is called when the RPC has been processed successfully.</param>
            <param name="failureHandler">This handler is called in case there was an error when processing the RPC.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.Rpc(SoftGear.Strix.Client.Core.UID,System.String,System.Object[])">
            <summary>
            Calls an RPC on a room member specified by UID.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            Target member must be in the same match room as you.
            </remarks>
            <param name="rpcName">RPC method name.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.Rpc(SoftGear.Strix.Client.Core.UID,System.String,SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,System.Object[])">
            <summary>
            Calls an RPC on a room member specified by UID.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            Target member must be in the same match room as you.
            <br/><br/>
            <b>Possible error codes:</b>
              <list type="table">
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                  <description>Server did not respond within the specified timeout interval.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                  <description>You're trying to send an RPC message while not being joined to a room.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                  <description>Failed to send the request because of a connection error.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Replica.Error.ReplicaErrorCode.ReplicaNotSynchronized"/></term>
                  <description>The object is not being synchronized over the network.</description>
                </item>
              </list>
            </remarks>
            <param name="rpcName">RPC method name.</param>
            <param name="successHandler">This handler is called when the RPC has been processed successfully.</param>
            <param name="failureHandler">This handler is called in case there was an error when processing the RPC.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToRoomOwner(System.String,System.Object[])">
            <summary>
            Calls an RPC on the room owner.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            </remarks>
            <param name="rpcName">RPC method name.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToRoomOwner(System.String,SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,System.Object[])">
            <summary>
            Calls an RPC on the room owner.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            <br/><br/>
            <b>Possible error codes:</b>
              <list type="table">
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                  <description>Server did not respond within the specified timeout interval.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                  <description>You're trying to send an RPC message while not being joined to a room.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                  <description>Failed to send the request because of a connection error.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Replica.Error.ReplicaErrorCode.ReplicaNotSynchronized"/></term>
                  <description>The object is not being synchronized over the network.</description>
                </item>
              </list>
            </remarks>
            <param name="rpcName">RPC method name.</param>
            <param name="successHandler">This handler is called when the RPC has been processed successfully.</param>
            <param name="failureHandler">This handler is called in case there was an error when processing the RPC.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToOtherMembers(System.String,System.Object[])">
            <summary>
            Calls an RPC on all the clients in the match room except for this one.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            </remarks>
            <param name="rpcName">RPC method name.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToOtherMembers(System.String,SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,System.Object[])">
            <summary>
            Calls an RPC on all the clients in the match room except for this one.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            <br/><br/>
            <b>Possible error codes:</b>
              <list type="table">
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                  <description>Server did not respond within the specified timeout interval.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                  <description>You're trying to send an RPC message while not being joined to a room.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                  <description>Failed to send the request because of a connection error.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Replica.Error.ReplicaErrorCode.ReplicaNotSynchronized"/></term>
                  <description>The object is not being synchronized over the network.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MessageLimitReached"/></term>
                  <description>The object is not being synchronized over the network.</description>
                </item>
              </list>
            </remarks>
            <param name="rpcName">RPC method name.</param>
            <param name="successHandler">This handler is called when the RPC has been processed successfully.</param>
            <param name="failureHandler">This handler is called in case there was an error when processing the RPC.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,System.Object[])">
            <summary>
            Calls an RPC on all the clients in the match room including self.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            </remarks>
            <example>
            In this example we use RPC to update character's health instead of a <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute">StrixSyncField</see> in order to add a visual effect when the hit was strong enough.
            We also use <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> to get information about the client who sent the RPC.
            <see href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnMouseDown.html">OnMouseDown</see> method is called by Unity when you click this object (the object also needs a collider).
            When this happens we invoke an RPC using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,System.Object[])">RpcToAll</see> method and pass the name of the method (&quot;Hit&quot;) along with the integer damage argument.
            Note that the actual Hit method has two arguments instead of one. The <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> argument is a special optional argument the data for which is supplied by Strix.
            Also note that we used <c>1</c> as a <see cref="P:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute.ProcedureCode">ProcedureCode</see> in <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute">StrixRpc</see> attribute.
            This is done to minimize the RPC network packet size since smaller values are better compressed. Although we have to make sure that we use each code only once.
            All the clients that receive the RPC check the damage amount independently and spawn a blood visual effect if the damage was greater than or equal to 5.
            This way the blood effect is fully local for each client and doesn't have to be replicated, and as a result the network traffic will also be reduced.
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            
            public class RpcExample : StrixBehaviour
            {
                public GameObject BloodPrefab;
                public int Health = 100;
            
                private void OnMouseDown()
                {
                    RpcToAll(&quot;Hit&quot;, Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage, StrixRpcContext strixRpcContext)
                {
                    Health = Mathf.Max(0, Health - damage);
            
                    if (damage &gt;= 5)
                        Instantiate(BloodPrefab, transform.position, Quaternion.identity);
            
                    Debug.Log(name + &quot; received &quot; + damage + &quot; damage from &quot; + strixRpcContext.sender.GetName());        
                }
            }
            </code>
            </example>
            <param name="rpcName">RPC method name.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,SoftGear.Strix.Unity.Runtime.Event.RpcSuccessEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,System.Object[])">
            <summary>
            Calls an RPC on all the clients in the match room including self.
            </summary>
            <remarks>
            The method has to be defined on the same class and marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute.
            <br/><br/>
            <b>Possible error codes:</b>
              <list type="table">
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                  <description>Server did not respond within the specified timeout interval.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                  <description>You're trying to send an RPC message while not being joined to a room.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                  <description>Failed to send the request because of a connection error.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Replica.Error.ReplicaErrorCode.ReplicaNotSynchronized"/></term>
                  <description>The object is not being synchronized over the network.</description>
                </item>
                <item>
                  <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MessageLimitReached"/></term>
                  <description>The object is not being synchronized over the network.</description>
                </item>
              </list>
            </remarks>
            <example>
            In this example we use RPC to update character's health instead of a <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute">StrixSyncField</see> in order to add a visual effect when the hit was strong enough.
            We also use <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> to get information about the client who sent the RPC.
            <see href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnMouseDown.html">OnMouseDown</see> method is called by Unity when you click this object (the object also needs a collider).
            When this happens we invoke an RPC using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,System.Object[])">RpcToAll</see> method and pass the name of the method (&quot;Hit&quot;) along with the integer damage argument.
            Note that the actual Hit method has two arguments instead of one. The <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> argument is a special optional argument the data for which is supplied by Strix.
            Also note that we used <c>1</c> as a <see cref="P:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute.ProcedureCode">ProcedureCode</see> in <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute">StrixRpc</see> attribute.
            This is done to minimize the RPC network packet size since smaller values are better compressed. Although we have to make sure that we use each code only once.
            All the clients that receive the RPC check the damage amount independently and spawn a blood visual effect if the damage was greater than or equal to 5.
            This way the blood effect is fully local for each client and doesn't have to be replicated, and as a result the network traffic will also be reduced.
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            
            public class RpcExample : StrixBehaviour
            {
                public GameObject BloodPrefab;
                public int Health = 100;
            
                private void OnMouseDown()
                {
                    RpcToAll(&quot;Hit&quot;, _ =&gt; Debug.Log(&quot;RPC finished.&quot;), error =&gt; Debug.LogError(&quot;Could not call RPC:&quot; + error.cause), Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage, StrixRpcContext strixRpcContext)
                {
                    Health = Mathf.Max(0, Health - damage);
            
                    if (damage &gt;= 5)
                        Instantiate(BloodPrefab, transform.position, Quaternion.identity);
            
                    Debug.Log(name + &quot; received &quot; + damage + &quot; damage from &quot; + strixRpcContext.sender.GetName());        
                }
            }
            </code>
            </example>
            <param name="rpcName">RPC method name.</param>
            <param name="successHandler">This handler is called when the RPC has been processed successfully.</param>
            <param name="failureHandler">This handler is called in case there was an error when processing the RPC.</param>
            <param name="args">A list of method arguments. This should match the arguments in the method definition, both in number and respective types.</param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer">
            <summary>
            Component useful for synchronizing movement of non-physics objects such as characters.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.NearDistance">
            <summary>
            Distance used to determine if the object has reached the target.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.MaxSpeed">
            <summary>
            Maximum movement speed.
            </summary>
            <remarks>
            Set this to the object's maximum movement speed for smooth synchronization.
            </remarks>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.Acceleration">
            <summary>
            Acceleration.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.Damping">
            <summary>
            Damping.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.SyncPeriodMin">
            <summary>
            Minimum synchronization period (ms).
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.SyncPeriodMax">
            <summary>
            Maximum synchronization period (ms).
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.PredictionPeriod">
            <summary>
            Prediction period used in synchronization (ms).
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer.Reset(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Resets the interpolation data of the remote object.
            </summary>
            <remarks>
            Can be useful in situations where you disable the <see cref="T:SoftGear.Strix.Unity.Runtime.StrixMovementSynchronizer"/> to reset the data after re-enabling it.
            <para>
            Ignored, if called on a local object.
            </para>
            </remarks>
            <param name="position">New position.</param>
            <param name="velocity">New velocity.</param>
            <param name="rotation">New rotation.</param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixNetwork">
            <summary>
              Strix Network high-level API entry point class.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.instance">
            <summary>
              StrixNetwork object singleton reference.
            </summary>
            <remarks>
              When accessed for the first time initializes a new instance of the StrixNetwork class.
            </remarks>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.isInitialized">
            <summary>
              <see langword="true"/> if StrixNetwork instance is initialized; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.playerName">
            <summary>
              Player name.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId">
            <summary>
              Application unique identifier.
              This value should be set before connecting to the master server.
              You can find it on the Information tab of the Dashboard on the Strix Cloud web page.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.authorizationAccessToken">
            <summary>
              Authorization access token. If not null or empty, used to authorize this client when connecting to the match room server.<br/>
              To use it you should also provide a valid authorization server URL to <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.JoinRoom(SoftGear.Strix.Unity.Runtime.RoomJoinArgs,SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)"/> through <see cref="T:SoftGear.Strix.Unity.Runtime.RoomJoinArgs"/>.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.masterSession">
            <summary>
              Master server session.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.roomSession">
            <summary>
              Room server session.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.isRoomOwner">
            <summary>
              <see langword="true"/> if you are the owner of the currently joined room (if any); <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.autoInstantiateReplica">
            <summary>
              Determines if game objects should be automatically created from replicas when joined to a match room.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.room">
            <summary>
              Information about the room you are currently a member of.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.roomMembers">
            <summary>
              A list of all members in the current match room.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.sortedRoomMembers">
            <summary>
              A list of all members in the current match room sorted by primary key.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.selfRoomMember">
            <summary>
              Information about your own match room member.
            </summary>
        </member>
        <member name="E:SoftGear.Strix.Unity.Runtime.StrixNetwork.roomSessionClosed">
            <summary>
              Event fired when the room server connection gets closed.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.Destroy">
            <summary>
              Closes the connections to both master and room servers if any of them were open and destroys StrixNetworkBehaviour gameObject.
            </summary>
            <remarks>
              After calling this method <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.isInitialized"/> returns <see langword="false"/>.
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
                
                public class StrixConnectAndDestroyExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            port: 9122,
                            connectEventHandler: _ =&gt; Debug.Log(&quot;Connection established.&quot;),
                            errorEventHandler: args =&gt; Debug.Log(&quot;Connection failed. &quot; + args.cause?.Message));
                
                        Debug.Log(&quot;Connecting to the master server...&quot;);
                    }
                
                    void OnDestroy()
                    {
                        StrixNetwork.instance.Destroy();
                    }
                }
              </code>
            </example>        
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.ConnectMasterServer(System.String,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler)">
            <summary>
              Establishes a connection with a master server on port 9122.
            </summary>
            <remarks>
              Before calling this method you should set <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/>. It can be found on the Information tab of the Dashboard on the Strix Cloud web page.
              If already connected, calling this method with different <paramref name="host"/> will close the existing connection before opening a new one.
              This overload uses port 9122 implicitly. If you wish to specify another port use <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.ConnectMasterServer(System.String,System.Int32,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler)"/>.
              The connection establishment timeout is 30 seconds.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
                
                public class StrixConnectExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                        	host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; Debug.Log(&quot;Connection established.&quot;),
                            errorEventHandler: args =&gt; Debug.Log(&quot;Connection failed. &quot; + args.cause?.Message));
                
                        Debug.Log(&quot;Connecting to the master server...&quot;);
                    }
                }
              </code>
            </example>
            <param name="host">The address of the master server. Can be either URL, IPv4 address, or IPv6 address.</param>
            <param name="connectEventHandler">This callback is invoked when the connection to the master server has been established successfully.</param>
            <param name="errorEventHandler">This callback is invoked in case the connection could not be established.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if port does not lie within 0-65535 range.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.ConnectMasterServer(System.String,System.Int32,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectEventHandler,SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventHandler)">
            <summary>
              Establishes a connection with a master server.
            </summary>
            <remarks>
              Before calling this method you should set <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/>. It can be found on the Information tab of the Dashboard on the Strix Cloud web page.
              If already connected, calling this method with different <paramref name="host"/> and/or <paramref name="port"/> will close the existing connection before opening a new one.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.StrixNetworkConnectFailedEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
                
                public class StrixConnectExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                        	host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                        	port: 9122,
                            connectEventHandler: _ =&gt; Debug.Log(&quot;Connection established.&quot;),
                            errorEventHandler: args =&gt; Debug.Log(&quot;Connection failed. &quot; + args.cause?.Message));
                
                        Debug.Log(&quot;Connecting to the master server...&quot;);
                    }
                }
              </code>
            </example>
            <param name="host">The address of the master server. Can be either URL, IPv4 address, or IPv6 address.</param>
            <param name="port">The port number of the master server. Must be between 1 and 65535. Default value for the Strix cloud is 9122.</param>
            <param name="connectEventHandler">This callback is invoked when the connection to the master server has been established successfully.</param>
            <param name="errorEventHandler">This callback is invoked in case the connection could not be established.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if port does not lie within 0-65535 range.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.DisconnectMasterServer">
            <summary>
              Closes the connection to the master server if it is open.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Starts an asynchronous search for match rooms.
              After search is complete <paramref name="handler"/> callback is invoked with a list of found rooms.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="limit">Limits the number of search results. This value must be greater than 0.</param>
            <param name="offset">The starting offset in the search results, e.g. if limit is set to 10, and offset is set to 15, the search will result in rooms 15 to 25.</param>
            <param name="handler">This callback is invoked when the room search completes.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Starts an asynchronous search for match rooms that meet the given criteria.
              After search is complete <paramref name="handler"/> callback is invoked with a list of found rooms.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder;
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
               
                public class StrixSearchRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
               
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
               
                                strixNetwork.CreateRoom(
                                    new RoomProperties { name = &quot;My Game Room&quot; },
                                    new RoomMemberProperties { name = &quot;My Player Name&quot; },
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room 1 created.&quot;);
               
                                        strixNetwork.SearchRoom(
                                            condition: ConditionBuilder.Builder().Field(&quot;name&quot;).EqualTo(&quot;My Game Room&quot;).Build(),
                                            limit: 10,
                                            offset: 0,
                                            handler: searchResults =&gt; {
                                                Debug.Log(searchResults.roomInfoCollection.Count + &quot; rooms found.&quot;);
               
                                                foreach (var roomInfo in searchResults.roomInfoCollection)
                                                    Debug.Log(&quot;Room ID: &quot; + roomInfo.id
                                                        + &quot;\nHost: &quot; + roomInfo.host
                                                        + &quot;\nMember count: &quot; + roomInfo.memberCount
                                                        + &quot;\nCapacity: &quot; + roomInfo.capacity
                                                    );
                                            },
                                            failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause));
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="condition">Search request criteria. See <see cref="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition"/>.</param>
            <param name="limit">Limits the number of search results. This value must be greater than 0.</param>
            <param name="offset">The starting offset in the search results, e.g. if limit is set to 10, and offset is set to 15, the search will result in rooms 15 to 25.</param>
            <param name="handler">This callback is invoked when the room search completes.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Starts an asynchronous ordered search for match rooms that meet the given criteria.
              After search is complete <paramref name="handler"/> callback is invoked with a list of found rooms.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder;
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
                
                public class StrixSearchRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    new RoomProperties { name = &quot;My Game Room&quot; },
                                    new RoomMemberProperties { name = &quot;My Player Name&quot; },
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room created.&quot;);
                
                                        strixNetwork.SearchRoom(
                                            condition: ConditionBuilder.Builder().Field(&quot;name&quot;).EqualTo(&quot;My Game Room&quot;).Build(),
                                            order: new Order(&quot;memberCount&quot;, OrderType.Ascending),
                                            limit: 10,
                                            offset: 0,
                                            handler: searchResults =&gt; {
                                                Debug.Log(searchResults.roomInfoCollection.Count + &quot; rooms found.&quot;);
                
                                                foreach (var roomInfo in searchResults.roomInfoCollection)
                                                    Debug.Log(&quot;Room ID: &quot; + roomInfo.id
                                                        + &quot;\nHost: &quot; + roomInfo.host
                                                        + &quot;\nMember count: &quot; + roomInfo.memberCount
                                                        + &quot;\nCapacity: &quot; + roomInfo.capacity
                                                    );
                                            },
                                            failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause)
                                        );
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="condition">Search request criteria. See <see cref="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition"/>.</param>
            <param name="order">Allows you to sort the search results in ascending or descending order. The ordering is applied before <paramref name="limit"/> and <paramref name="offset"/>.</param>
            <param name="limit">Limits the number of search results. This value must be greater than 0.</param>
            <param name="offset">The starting offset in the search results, e.g. if limit is set to 10, and offset is set to 15, the search will result in rooms 15 to 25.</param>
            <param name="handler">This callback is invoked when the room search completes.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchJoinableRoom(System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Starts an asynchronous search for match rooms that have enough room for joining.
              After search is complete <paramref name="handler"/> callback is invoked with a list of found rooms.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              Despite the name, it doesn't check if <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.isJoinable"/> parameter of the match room is set to <see langword="true"/>.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="limit">Limits the number of search results. This value must be greater than 0.</param>
            <param name="offset">The starting offset in the search results, e.g. if limit is set to 10, and offset is set to 15, the search will result in rooms 15 to 25.</param>
            <param name="handler">This callback is invoked when the room search completes.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchJoinableRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Starts an asynchronous search for match rooms that have enough room for joining and match the given criteria.
              After search is complete <paramref name="handler"/> callback is invoked with a list of found rooms.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              Despite the name, it doesn't check if <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.isJoinable"/> parameter of the match room is set to <see langword="true"/>.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="condition"></param>
            <param name="order"></param>
            <param name="limit">Limits the number of search results. This value must be greater than 0.</param>
            <param name="offset">The starting offset in the search results, e.g. if limit is set to 10, and offset is set to 15, the search will result in rooms 15 to 25.</param>
            <param name="handler">This callback is invoked when the room search completes.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.CreateRoom(SoftGear.Strix.Unity.Runtime.RoomProperties,SoftGear.Strix.Unity.Runtime.RoomMemberProperties,SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Creates a new room with the given properties and immediately joins the room as the owner with the given member properties.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Could not leave the current room before creating a new one. Either the room does not exist or you're not a member of this room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MaxRoomCountReached"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to create a new room. Then we create a match room for up to 20 members, give it a name, set a password, and a description.
              Strix match rooms have 1 <see langword="string"/> property (<see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.stringKey">stringKey</see>) and 8 <see langword="double"/> properties (<see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see>, ..., <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key8">key8</see>)) that can be set to any value and later be used in a search criteria.
              In the current example we use <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see> to signify the difficulty of the game match and set it to <c>4.0</c>.
              Since we define description as a custom property, we cannot use it in a search condition, but we can still read its value in the search results.
              After creating the room we perform a search for all rooms that have difficulty set to <c>2.0</c> or greater to check if the room was created correctly.
              Then we output the information about the found room to see if the properties we have set are readable.<br/>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter;
                using SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder;
                using SoftGear.Strix.Unity.Runtime;
                using System.Collections.Generic;
                using UnityEngine;
                
                public class StrixCreateRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    new RoomProperties {
                                        name = &quot;Fire Tournament&quot;,
                                        password = &quot;66e3f2nk&quot;,
                                        capacity = 20,
                                        key1 = 4.0,
                                        properties = new Dictionary&lt;string, object&gt; { { &quot;description&quot;, &quot;The first major tournament of the new season.&quot; } }
                                    },
                                    new RoomMemberProperties { name = &quot;Braille&quot; },
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room created.&quot;);
                
                                        strixNetwork.SearchRoom(
                                            condition: ConditionBuilder.Builder().Field(&quot;key1&quot;).GreaterThan(2.0).Build(),
                                            order: new Order(&quot;memberCount&quot;, OrderType.Ascending),
                                            limit: 10,
                                            offset: 0,
                                            handler: searchResults =&gt; {
                                                var foundRooms = searchResults.roomInfoCollection;
                                                Debug.Log(foundRooms.Count + &quot; rooms found.&quot;);
                
                                                foreach (var roomInfo in foundRooms)
                                                    Debug.Log(&quot;Room ID: &quot; + roomInfo.id
                                                        + &quot;\nHost: &quot; + roomInfo.host
                                                        + &quot;\nMember count: &quot; + roomInfo.memberCount
                                                        + &quot;\nCapacity: &quot; + roomInfo.capacity
                                                        + &quot;\nDifficulty: &quot; + roomInfo.key1
                                                        + &quot;\nDescription: &quot; + (roomInfo.properties != null &amp;&amp; roomInfo.properties.ContainsKey(&quot;description&quot;) ? roomInfo.properties[&quot;description&quot;] : &quot;None&quot;)
                                                    );
                                            },
                                            failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause)
                                        );
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="roomProperties">Use this to set room name, member capacity, password, etc. See <see cref="T:SoftGear.Strix.Unity.Runtime.RoomProperties"/> for more info.</param>
            <param name="memberProperties">Used to set your member properties as the owner of the newly created room.</param>
            <param name="handler">This callback is invoked when the room creation is finished.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
            <exception cref="T:System.NullReferenceException">Thrown if <paramref name="roomProperties"/> is null.</exception>
            <exception cref="T:System.NullReferenceException">Thrown if <paramref name="memberProperties"/> is null.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.CreateRoom(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Creates a new room with the given properties and immediately joins the room as the owner with the given player name.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Could not leave the current room before creating a new one. Either the room does not exist or you're not a member of this room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MaxRoomCountReached"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to create a new room. Then we create a match room for up to 20 members, give it a name, set a password, and a description.
              Strix match rooms have 1 <see langword="string"/> property (<see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.stringKey">stringKey</see>) and 8 <see langword="double"/> properties (<see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see>, ..., <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key8">key8</see>)) that can be set to any value and later be used in a search criteria.
              In the current example we use <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see> to signify the difficulty of the game match and set it to <c>4.0</c>.
              Since we define description as a custom property, we cannot use it in a search condition, but we can still read its value in the search results.
              After creating the room we perform a search for all rooms that have difficulty set to <c>2.0</c> or greater to check if the room was created correctly.
              Then we output the information about the found room to see if the properties we have set are readable.<br/>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.<br/>
              When using this overload, properties are set by means of a dictionary, so you have to be careful to provide the values of the correct type.
              In this example if we used <c>4</c> or <c>4.0f</c> instead of <c>4.0</c> the request would fail since <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see>'s type is <see langword="double"/>. To find out the expected types, please refer to the <see cref="T:SoftGear.Strix.Unity.Runtime.RoomProperties"/> class.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter;
                using SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder;
                using SoftGear.Strix.Unity.Runtime;
                using System.Collections.Generic;
                using UnityEngine;
                
                public class StrixCreateRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    new Dictionary&lt;string, object&gt; {
                                        { &quot;name&quot;, &quot;Fire Tournament&quot; },
                                        { &quot;password&quot;, &quot;66e3f2nk&quot; },
                                        { &quot;capacity&quot;, 20 },
                                        { &quot;key1&quot;, 4.0 },
                                        { &quot;properties&quot;, new Dictionary&lt;string, object&gt; {
                                            { &quot;description&quot;, &quot;The first major tournament of the new season.&quot; }
                                        } }
                                    },
                                    playerName: &quot;Braille&quot;,
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room created.&quot;);
                
                                        strixNetwork.SearchRoom(
                                            condition: ConditionBuilder.Builder().Field(&quot;key1&quot;).GreaterThan(2.0).Build(),
                                            order: new Order(&quot;memberCount&quot;, OrderType.Ascending),
                                            limit: 10,
                                            offset: 0,
                                            handler: searchResults =&gt; {
                                                var foundRooms = searchResults.roomInfoCollection;
                                                Debug.Log(foundRooms.Count + &quot; rooms found.&quot;);
                
                                                foreach (var roomInfo in foundRooms)
                                                    Debug.Log(&quot;Room ID: &quot; + roomInfo.id
                                                        + &quot;\nHost: &quot; + roomInfo.host
                                                        + &quot;\nMember count: &quot; + roomInfo.memberCount
                                                        + &quot;\nCapacity: &quot; + roomInfo.capacity
                                                        + &quot;\nDifficulty: &quot; + roomInfo.key1
                                                        + &quot;\nDescription: &quot; + (roomInfo.properties != null &amp;&amp; roomInfo.properties.ContainsKey(&quot;description&quot;) ? roomInfo.properties[&quot;description&quot;] : &quot;None&quot;)
                                                    );
                                            },
                                            failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause)
                                        );
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="roomProperties">Use this to set room name, member capacity, password, etc.</param>
            <param name="playerName">Name of the room's owner</param>
            <param name="handler">This callback is invoked when the room creation is finished.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.CreateRoom(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Creates a new room with the given properties and immediately joins it.
            </summary>
            <remarks>
              To use this method you have to connect to the master server at least once.
              If disconnected, calling this method will reconnect to the master server with the last used host and port parameters.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Could not leave the current room before creating a new one. Either the room does not exist or you're not a member of this room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MaxRoomCountReached"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to create a new room. Then we create a match room for up to 20 members, give it a name, set a password, and a description.
              Strix match rooms have 1 <see langword="string"/> property (<see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.stringKey">stringKey</see>) and 8 <see langword="double"/> properties (<see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see>, ..., <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key8">key8</see>)) that can be set to any value and later be used in a search criteria.
              In the current example we use <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see> to signify the difficulty of the game match and set it to <c>4.0</c>.
              Since we define description as a custom property, we cannot use it in a search condition, but we can still read its value in the search results.
              After creating the room we perform a search for all rooms that have difficulty set to <c>2.0</c> or greater to check if the room was created correctly.
              Then we output the information about the found room to see if the properties we have set are readable.<br/>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.<br/>
              When using this overload, properties are set by means of a dictionary, so you have to be careful to provide the values of the correct type.
              In this example if we used <c>4</c> or <c>4.0f</c> instead of <c>4.0</c> the request would fail since <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.key1">key1</see>'s type is <see langword="double"/>. To find out the expected types, please refer to the <see cref="T:SoftGear.Strix.Unity.Runtime.RoomProperties"/> class.
              The same applies to <see cref="T:SoftGear.Strix.Unity.Runtime.RoomMemberProperties"/>'s values.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter;
                using SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder;
                using SoftGear.Strix.Unity.Runtime;
                using System.Collections.Generic;
                using UnityEngine;
                
                public class StrixCreateRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    new Dictionary&lt;string, object&gt; {
                                        { &quot;name&quot;, &quot;Fire Tournament&quot; },
                                        { &quot;password&quot;, &quot;66e3f2nk&quot; },
                                        { &quot;capacity&quot;, 20 },
                                        { &quot;key1&quot;, 4.0 },
                                        { &quot;properties&quot;, new Dictionary&lt;string, object&gt; {
                                            { &quot;description&quot;, &quot;The first major tournament of the new season.&quot; }
                                        } }
                                    },
                                    new Dictionary&lt;string, object&gt; {
                                        { &quot;name&quot;, &quot;Braille&quot; }
                                    },
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room created.&quot;);
                
                                        strixNetwork.SearchRoom(
                                            condition: ConditionBuilder.Builder().Field(&quot;key1&quot;).GreaterThan(2.0).Build(),
                                            order: new Order(&quot;memberCount&quot;, OrderType.Ascending),
                                            limit: 10,
                                            offset: 0,
                                            handler: searchResults =&gt; {
                                                var foundRooms = searchResults.roomInfoCollection;
                                                Debug.Log(foundRooms.Count + &quot; rooms found.&quot;);
                
                                                foreach (var roomInfo in foundRooms)
                                                    Debug.Log(&quot;Room ID: &quot; + roomInfo.id
                                                        + &quot;\nHost: &quot; + roomInfo.host
                                                        + &quot;\nMember count: &quot; + roomInfo.memberCount
                                                        + &quot;\nCapacity: &quot; + roomInfo.capacity
                                                        + &quot;\nDifficulty: &quot; + roomInfo.key1
                                                        + &quot;\nDescription: &quot; + (roomInfo.properties != null &amp;&amp; roomInfo.properties.ContainsKey(&quot;description&quot;) ? roomInfo.properties[&quot;description&quot;] : &quot;None&quot;)
                                                    );
                                            },
                                            failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause)
                                        );
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="roomProperties">Use this to set room name, member capacity, password, etc.</param>
            <param name="memberProperties">Used to set your member properties as the owner of the newly created room.</param>
            <param name="handler">This callback is invoked when the room creation is finished.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if called before connecting to the master server.</exception>
            <exception cref="T:System.NullReferenceException">Thrown if <paramref name="roomProperties"/> is null.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoom(System.Int64,SoftGear.Strix.Unity.Runtime.RoomProperties,SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Changes the properties of an existing match room.
            </summary>
            <remarks>
              To use this method you must be the room's owner.
              You cannot change primaryKey, ownerUid, and memberCount using this method.<br/>
              <br/>
              List of parameters available for changing:
              <list type="bullet">
                <item><term>name</term><description>The name of the room.</description></item>
                <item><term>capacity</term><description>Maximum number of room members.</description></item>
                <item><term>password</term><description>Room entry password.</description></item>
                <item><term>state</term><description>An integer value that can be used for application's own purposes.</description></item>
                <item><term>isJoinable</term><description>Determines if new players are allowed to join the room.</description></item>
                <item><term>key1</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key2</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key3</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key4</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key5</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key6</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key7</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key8</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>stringKey</term><description>An arbitrary string value that can be used for application's own purposes.</description></item>
              </list>
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ModelNotFound"/></term>
                        <description>Could not find the room with the given ID.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description>Could not find one of the properties to set.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to create a new room. Then we create a match room for up to 20 members and give it a name.
              We check and output to log the room's current capacity by reading <see cref="!:CustomizableMatchRoom.GetCapacity">StrixNetwork.instance.room.GetCapacity()</see> right after creating the room.
              Then we change the capacity from 20 to 15 and print it again to see if the new value was applied successfully.
              <br/>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
                
                public class StrixConnectTest : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    roomProperties: new RoomProperties {
                                        name = &quot;Wildwood&quot;,
                                        password = &quot;66e3f2nk&quot;,
                                        capacity = 20
                                    },
                                    memberProperties: new RoomMemberProperties {
                                        name = &quot;Artemis&quot;
                                    },
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room created. Current capacity: &quot; + strixNetwork.room.GetCapacity());
                
                                        strixNetwork.SetRoom(
                                            roomId: strixNetwork.roomSession.room.GetPrimaryKey(),
                                            roomProperties: new RoomProperties {
                                                capacity = 15
                                            },
                                            handler: setRoomResult =&gt; Debug.Log(&quot;Capacity changed. Current capacity: &quot; + strixNetwork.room.GetCapacity()),
                                            failureHandler: setRoomError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + setRoomError.cause)
                                        );
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="roomId">ID of the match room.</param>
            <param name="roomProperties">New values of the room properties.</param>
            <param name="handler">This callback is invoked when the changes have been applied successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Thrown if <paramref name="roomProperties"/> is null.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoom(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object},SoftGear.Strix.Unity.Runtime.Event.RoomSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Changes the properties of an existing match room.
            </summary>
            <remarks>
              To use this method you must be the room's owner.
              You cannot change <c>primaryKey</c>, <c>ownerUid</c>, and <c>memberCount</c> using this method.<br/>
              <br/>
              List of parameters available for changing:
              <list type="bullet">
                <item><term>name</term><description>The name of the room.</description></item>
                <item><term>capacity</term><description>Maximum number of room members.</description></item>
                <item><term>password</term><description>Room entry password.</description></item>
                <item><term>state</term><description>An integer value that can be used for application's own purposes.</description></item>
                <item><term>isJoinable</term><description>Determines if new players are allowed to join the room.</description></item>
                <item><term>key1</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key2</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key3</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key4</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key5</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key6</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key7</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>key8</term><description>An arbitrary double value that can be used for application's own purposes.</description></item>
                <item><term>stringKey</term><description>An arbitrary string value that can be used for application's own purposes.</description></item>
              </list>
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ModelNotFound"/></term>
                        <description>Could not find the room with the given ID.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description>Could not find one of the properties to set.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to create a new room. Then we create a match room for up to 20 members and give it a name.
              We check and output to log the room's current capacity by reading <see cref="!:CustomizableMatchRoom.GetCapacity">StrixNetwork.instance.room.GetCapacity()</see> right after creating the room.
              Then we change the capacity from 20 to 15 and print it again to see if the new value was applied successfully.
              <br/>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              When using this overload, properties are set by means of a dictionary, so you have to be careful to provide the values of the correct type.
              In this example if we used <c>15.0</c> or <c>15f</c> instead of <c>15</c> the request would fail since <see cref="P:SoftGear.Strix.Unity.Runtime.RoomProperties.capacity">capacity</see>'s type is <see langword="int"/>. To find out the expected types, please refer to the <see cref="T:SoftGear.Strix.Unity.Runtime.RoomProperties"/> class.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using System.Collections.Generic;
                using UnityEngine;
                
                public class StrixConnectTest : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    roomProperties: new Dictionary&lt;string, object&gt; {
                                        { &quot;name&quot;, &quot;Wildwood&quot; },
                                        { &quot;password&quot;, &quot;66e3f2nk&quot; },
                                        { &quot;capacity&quot;, 20 }
                                    },
                                    playerName: &quot;Artemis&quot;,
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room created. Current capacity: &quot; + strixNetwork.room.GetCapacity());
                
                                        strixNetwork.SetRoom(
                                            roomId: strixNetwork.roomSession.room.GetPrimaryKey(),
                                            roomProperties: new Dictionary&lt;string, object&gt; {
                                                { &quot;capacity&quot;, 15 }
                                            },
                                            handler: setRoomResult =&gt; Debug.Log(&quot;Capacity changed. Current capacity: &quot; + strixNetwork.room.GetCapacity()),
                                            failureHandler: setRoomError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + setRoomError.cause)
                                        );
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="roomId">ID of the match room.</param>
            <param name="roomProperties">New values of the room properties.</param>
            <param name="handler">This callback is invoked when the changes have been applied successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.JoinRoom(System.String,System.Int32,System.String,System.Int64,System.String,SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Joins a match room.
            </summary>
            <remarks>
              In order to join the room, you need to know the address of the room server (<paramref name="host"/> and <paramref name="port"/>), the <paramref name="protocol"/>, and the room ID.
              Usually, you can get them from <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SearchRoom</see> results.
              See <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.host"/>, <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.port"/>, <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.protocol"/>, and <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.roomId"/>.
              <paramref name="playerName"/> is optional and can be left empty or null.<br/>
              If your setup makes use of an authorization server, use the <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.JoinRoom(SoftGear.Strix.Unity.Runtime.RoomJoinArgs,SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">overload</see> of this method that accepts <see cref="T:SoftGear.Strix.Unity.Runtime.RoomJoinArgs"/> and provide the authorization server URL through <see cref="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.authUrl"/>.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description>Could not find one of the properties to set.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Could not find the room with the given <paramref name="roomId"/>.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.AlreadyInRoom"/></term>
                        <description>You are already joined to the room you're trying to join.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomFullOfMembers"/></term>
                        <description>The room you're trying to join has no room for new members.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.WrongRoomPassword"/></term>
                        <description>The room you're trying to join is password-protected and either you didn't provide any password or it didn't match.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotJoinable"/></term>
                        <description>Cannot join the room because its owner has made it non-joinable.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to perform a search on it.
              After that we start searching for joinable match rooms (match rooms that have enough room for a new member).
              We sort the rooms by member count in ascending order so that the first room in the resulting list will be the least crowded.
              Then, if anything is found, we select the first room and try to join it.<br/>
              <br/>
              <b>Note:</b> In order for this example to work, you need to have an active room registered on the master server, but since rooms are destroyed if there are no members left, you would need at least two clients.
              You can create a match room from another game instance using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.CreateRoom(SoftGear.Strix.Unity.Runtime.RoomProperties,SoftGear.Strix.Unity.Runtime.RoomMemberProperties,SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">CreateRoom</see> and then run this example.
              Otherwise, the search will fail with no available rooms.<br/>
              Also, make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter;
                using SoftGear.Strix.Unity.Runtime;
                using System.Linq;
                using UnityEngine;
                
                public class StrixJoinRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.SearchJoinableRoom(
                                    condition: null,
                                    order: new Order(&quot;memberCount&quot;, OrderType.Ascending),
                                    limit: 10,
                                    offset: 0,
                                    handler: searchResults =&gt; {
                                        var foundRooms = searchResults.roomInfoCollection;
                                        Debug.Log(foundRooms.Count + &quot; rooms found.&quot;);
                
                                        if (foundRooms.Count == 0) {
                                            Debug.LogError(&quot;No joinable rooms found.&quot;);
                                            return;
                                        }
                
                                        var roomInfo = foundRooms.First();
                
                                        strixNetwork.JoinRoom(
                                            host: roomInfo.host,
                                            port: roomInfo.port,
                                            protocol: roomInfo.protocol,
                                            roomId: roomInfo.roomId,
                                            playerName: &quot;My Player Name&quot;,
                                            handler: __ =&gt; Debug.Log(&quot;Room joined.&quot;),
                                            failureHandler: joinError =&gt; Debug.LogError(&quot;Join failed. Reason: &quot; + joinError.cause)
                                        );
                                    },
                                    failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="host">The address of the room server. Can be either URL, IPv4 address, or IPv6 address.</param>
            <param name="port">The port number of the room server. Must be between 1 and 65535.</param>
            <param name="protocol">Protocol used to connect to the room server. This parameter should be set to a value returned by <see cref="P:SoftGear.Strix.Unity.Runtime.RoomInfo.protocol"/>.</param>
            <param name="roomId">An ID of the room on the room server.</param>
            <param name="playerName">The name your player will have after joining the room. Can be left empty or null.</param>
            <param name="handler">This callback is invoked when joining the room has completed successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.JoinRoom(SoftGear.Strix.Unity.Runtime.RoomJoinArgs,SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Joins a match room.
            </summary>
            <remarks>
              In order to join the room, you need to pass a <see cref="T:SoftGear.Strix.Unity.Runtime.RoomJoinArgs"/> class with the needed arguments.
              Usually, you can get the data for the <see cref="T:SoftGear.Strix.Unity.Runtime.RoomJoinArgs"/> from <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SearchRoom(SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition,SoftGear.Strix.Client.Core.Model.Manager.Filter.Order,System.Int32,System.Int32,SoftGear.Strix.Unity.Runtime.Event.RoomSearchEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">SearchRoom</see> results.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description>Could not find one of the properties to set.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Could not find the room with the given <see cref="P:SoftGear.Strix.Unity.Runtime.RoomJoinArgs.roomId"/>.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.AlreadyInRoom"/></term>
                        <description>You are already joined to the room you're trying to join.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomFullOfMembers"/></term>
                        <description>The room you're trying to join has no room for new members.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.WrongRoomPassword"/></term>
                        <description>The room you're trying to join is password-protected and either you didn't provide any password or it didn't match.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotJoinable"/></term>
                        <description>Cannot join the room because its owner has made it non-joinable.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to perform a search on it.
              After that we start searching for joinable match rooms (match rooms that have enough room for a new member).
              We sort the rooms by member count in ascending order so that the first room in the resulting list will be the least crowded.
              Then, if anything is found, we select the first room and try to join it.<br/>
              <br/>
              <b>Note:</b> In order for this example to work, you need to have an active room registered on the master server, but since rooms are destroyed if there are no members left, you would need at least two clients.
              You can create a match room from another game instance using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.CreateRoom(SoftGear.Strix.Unity.Runtime.RoomProperties,SoftGear.Strix.Unity.Runtime.RoomMemberProperties,SoftGear.Strix.Unity.Runtime.Event.RoomCreateEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">CreateRoom</see> and then run this example.
              Otherwise, the search will fail with no available rooms.<br/>
              Also, be sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter;
                using SoftGear.Strix.Unity.Runtime;
                using System.Collections.Generic;
                using System.Linq;
                using UnityEngine;
                
                public class StrixJoinRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.SearchJoinableRoom(
                                    condition: null,
                                    order: new Order(&quot;memberCount&quot;, OrderType.Ascending),
                                    limit: 10,
                                    offset: 0,
                                    handler: searchResults =&gt; {
                                        var foundRooms = searchResults.roomInfoCollection;
                                        Debug.Log(foundRooms.Count + &quot; rooms found.&quot;);
                
                                        if (foundRooms.Count == 0) {
                                            Debug.LogError(&quot;No joinable rooms found.&quot;);
                                            return;
                                        }
                
                                        var roomInfo = foundRooms.First();
                
                                        strixNetwork.JoinRoom(
                                            args: new RoomJoinArgs {
                                                host = roomInfo.host,
                                                port = roomInfo.port,
                                                protocol = roomInfo.protocol,
                                                roomId = roomInfo.roomId,
                                                memberProperties = new RoomMemberProperties {
                                                    name = &quot;My Player Name&quot;,
                                                    properties = new Dictionary&lt;string, object&gt; {
                                                        { &quot;hairColor&quot;, &quot;green&quot; }
                                                    }
                                                }
                                            },                            
                                            handler: __ =&gt; Debug.Log(&quot;Room joined.&quot;),
                                            failureHandler: joinError =&gt; Debug.LogError(&quot;Join failed. Reason: &quot; + joinError.cause)
                                        );
                                    },
                                    failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="args">Arguments needed to join the room such as server address and room ID. See <see cref="T:SoftGear.Strix.Unity.Runtime.RoomJoinArgs"/> for more information.</param>
            <param name="handler">This callback is invoked when joining the room has completed successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.LeaveRoom(SoftGear.Strix.Unity.Runtime.Event.RoomLeaveEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Leaves the match room this client is currently a member of (if any).
            </summary>
            <remarks>
              If you are the owner of the room, it gets destroyed.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Room is not found or you're not a member of the room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              In this example we first connect to a master server to be able to create a match room named &quot;Fire Tournament 2&quot;.
              After that we search for rooms that have the word &quot;Tournament&quot; in their name to see if the search results contain our newly created room.
              Then we try to leave the room. Since we just created it we should be the only member, and when the last member leaves the room it is automatically destroyed on the server.
              After leaving the room we repeat the search to see that the room is no longer there.<br/>
              <br/>
              <b>Note:</b> Be sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder;
                using SoftGear.Strix.Unity.Runtime;
                using System;
                using System.Collections.Generic;
                using UnityEngine;
                
                public class LeaveRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    new RoomProperties {
                                        name = &quot;Fire Tournament 2&quot;,
                                        password = &quot;66e3f2nk&quot;,
                                        capacity = 20,
                                        key1 = 4.0,
                                        properties = new Dictionary&lt;string, object&gt; { { &quot;description&quot;, &quot;The first major tournament of the new season.&quot; } }
                                    },
                                    new RoomMemberProperties { name = &quot;Braille&quot; },
                                    handler: __ =&gt; {
                                        Debug.Log(&quot;Room created.&quot;);
                
                                        SearchForTournament(() =&gt; {
                                            strixNetwork.LeaveRoom(
                                                handler: ___ =&gt; {
                                                    Debug.Log(&quot;Left the room successfully.&quot;);
                                                    SearchForTournament(() =&gt; { });
                                                },
                                                failureHandler: leaveError =&gt; Debug.LogError(&quot;Could not leave the room. Reason: &quot; + leaveError.cause)
                                            );
                                        });
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                
                    void SearchForTournament(Action onFinish)
                    {
                        StrixNetwork.instance.SearchRoom(
                            condition: ConditionBuilder.Builder().Field(&quot;name&quot;).Contains(&quot;Tournament&quot;).Build(),
                            limit: 10,
                            offset: 0,
                            handler: searchResult =&gt; {
                                Debug.Log(&quot;Number of rooms: &quot; + searchResult.roomInfoCollection.Count);
                                onFinish();
                            },
                            failureHandler: searchError =&gt; Debug.LogError(&quot;Search failed. Reason: &quot; + searchError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="handler">This callback is invoked when leaving the room has finished successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.LeaveRoom(System.Int64,SoftGear.Strix.Unity.Runtime.Event.RoomLeaveEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Leaves the match room this client is currently a member of (if any).
            </summary>
            <remarks>
              If you are the owner of the room, it gets destroyed.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Room is not found or you're not a member of the room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="roomId">ID of the match room</param>
            <param name="handler">This callback is invoked after you have successfully left the match room.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.DeleteRoom(System.Int64,SoftGear.Strix.Unity.Runtime.Event.RoomDeleteEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Deletes a match room.
            </summary>
            <remarks>
              To delete a room you must be the room's owner.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ModelNotFound"/></term>
                        <description>The room with <paramref name="roomId"/> is not found.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
                
                public class StrixDeleteRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.CreateRoom(
                                    new Dictionary&lt;string, object&gt; {
                                        { &quot;name&quot;, &quot;My Game Room&quot; },
                                        { &quot;capacity&quot;, 20 }
                                    },
                                    playerName: &quot;My Player Name&quot;,
                                    handler: createRoomResult =&gt; {
                                        Debug.Log(&quot;Room created.&quot;);
                
                                        strixNetwork.DeleteRoom(
                                            roomId: strixNetwork.room.GetPrimaryKey(),
                                            handler: deleteRoomResult =&gt; Debug.Log(&quot;Room deleted: &quot; + (strixNetwork.room == null)),
                                            failureHandler: deleteRoomError =&gt; Debug.LogError(&quot;Could not delete room. Reason: &quot; + deleteRoomError.cause)
                                        );
                                    },
                                    failureHandler: createRoomError =&gt; Debug.LogError(&quot;Could not create room. Reason: &quot; + createRoomError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="roomId">ID of the room to be deleted.</param>
            <param name="handler">This callback is called when destroying a room has completed successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.GetRoomMembers(System.Int64,SoftGear.Strix.Unity.Runtime.Event.RoomMemberGetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Requests the information about match room members.
            </summary>
            <remarks>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="roomId">ID of the match room.</param>
            <param name="handler">This callback is invoked when the request has completed successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Throws if you haven't joined any room.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoomMember(System.Int64,SoftGear.Strix.Unity.Runtime.RoomMemberProperties,SoftGear.Strix.Unity.Runtime.Event.RoomMemberSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)" -->
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SetRoomMember(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object},SoftGear.Strix.Unity.Runtime.Event.RoomMemberSetEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Changes properties of your room member.
            </summary>
            <remarks>
              You can not use this method to change other members' properties, even if you are the room's owner.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomMemberNotFound"/></term>
                        <description>The room member with <paramref name="memberId"/> could not be found.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotAllowedForOtherRoomMember"/></term>
                        <description>You cannot change the properties of any room member other than your own.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="memberId">ID of the room member. This should always be your own member's ID.</param>
            <param name="memberProperties">Dictionary containing the new room member property values.</param>
            <param name="handler">This callback is invoked when the request has completed successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SendRoomRelay(System.Object,SoftGear.Strix.Unity.Runtime.Event.RoomRelayEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Sends a relay message to all match room members.
            </summary>
            <remarks>
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MessageLimitReached"/></term>
                        <description>The limit for messages per second is reached (configurable on the Strix Cloud).</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                        <description>You're trying to send a relay message while not being joined to a room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="messageToRelay">The message that will be sent.</param>
            <param name="handler">This callback is invoked when the relay message has been sent successfully.</param>
            <param name="failureHandler">This callback is invoked if the message could not be sent for some reason.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SendRoomRelay(SoftGear.Strix.Client.Room.Message.RoomRelayMessage,SoftGear.Strix.Unity.Runtime.Event.RoomRelayEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Sends a relay message to all match room members using RoomRelayMessage.
            </summary>
            <remarks>
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MessageLimitReached"/></term>
                        <description>The limit for messages per second is reached (configurable on the Strix Cloud).</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                        <description>You're trying to send a relay message while not being joined to a room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="message">The message that will be sent.</param>
            <param name="handler">This callback is invoked when the relay message has been sent successfully.</param>
            <param name="failureHandler">This callback is invoked if the message could not be sent for some reason.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Throws if you're not joined to a room.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SendRoomDirectRelay(SoftGear.Strix.Client.Core.UID,System.Object,SoftGear.Strix.Unity.Runtime.Event.RoomDirectRelayEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Sends a relay message to a match room member.
            </summary>
            <remarks>
              The member receiving the message must be in the same room with the sender.
              Unlike RPCs, the member who sends the message does not receive it.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                        <description>You're trying to send a relay message while not being joined to a room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="to">ID of the member to whom the message is sent.</param>
            <param name="messageToRelay">The message that will be sent.</param>
            <param name="handler">This callback is invoked when the relay message has been sent successfully.</param>
            <param name="failureHandler">This callback is invoked if the message could not be sent for some reason.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Throws if you're not joined to a room.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.SendRoomDirectRelay(SoftGear.Strix.Client.Room.Message.RoomDirectRelayMessage,SoftGear.Strix.Unity.Runtime.Event.RoomDirectRelayEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Sends a relay message to a match room member using RoomDirectRelayMessage.
            </summary>
            <remarks>
              The member receiving the message must be in the same room with the sender.
              Unlike RPCs, the member who sends the message does not receive it.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomMember"/></term>
                        <description>You're trying to send a relay message while not being joined to a room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="message">The message that will be sent.</param>
            <param name="handler">This callback is invoked when the relay message has been sent successfully.</param>
            <param name="failureHandler">This callback is invoked if the message could not be sent for some reason.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
            <exception cref="T:System.NullReferenceException">Throws if you're not joined to a room.</exception>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.KickRoomMember(SoftGear.Strix.Client.Core.UID,SoftGear.Strix.Unity.Runtime.Event.RoomMemberKickEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Forcibly removes a member from the match room.
            </summary>
            <remarks>
              To kick a member you must be the room's owner.
              If the kick succeeds, the kicked room member will receive MatchRoomKickNotified notification on StrixNetwork.instance.roomClient while all the other members receive RoomLeaveNotified notification.
              <br/><br/>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NotRoomOwner"/></term>
                        <description>You're trying to kick a member while not being a room owner.</description>
                      </item>
                      <item>
                        <term><see cref="!:MatchErrorCode.SelfKickProhibited"/></term>
                        <description>Cannot kick yourself.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomMemberNotFound"/></term>
                        <description>Cannot find room member with <paramref name="kickedPlayerUid"/>.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                    </list>
                  </description>
                </item>
              </list>
            </remarks>
            <param name="kickedPlayerUid">ID of the player to be kicked.</param>
            <param name="handler">This callback is invoked when the member has been kicked successfully.</param>
            <param name="failureHandler">This is callback is invoked if the member could not be kicked for some reason.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.JoinRandomRoom(System.String,SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Joins a random match room.
            </summary>
            <remarks>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NoRoomsAvailable"/></term>
                        <description>Could not find joinable rooms.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Could not leave the current room before joining a new one. Either the room does not exist or you're not a member of this room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.AlreadyInRoom"/></term>
                        <description>You are already joined to the room you're trying to join.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomFullOfMembers"/></term>
                        <description>The room you're trying to join has no room for new members.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.WrongRoomPassword"/></term>
                        <description>The room you're trying to join is password-protected and either you didn't provide any password or it didn't match.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotJoinable"/></term>
                        <description>Cannot join the room because its owner has made it non-joinable.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MaxRoomCountReached"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using UnityEngine;
                
                public class StrixJoinRandomRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.JoinRandomRoom(
                                    playerName: &quot;My Player Name&quot;,
                                    handler: __ =&gt; Debug.Log(&quot;Room joined.&quot;),
                                    failureHandler: joinError =&gt; Debug.LogError(&quot;Joining random room failed. Reason: &quot; + joinError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="playerName">Used as a member name after the room has been joined successfully.</param>
            <param name="handler">This callback is invoked when the room has been joined successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.JoinRandomRoom(SoftGear.Strix.Unity.Runtime.RoomMemberProperties,SoftGear.Strix.Unity.Runtime.Event.RoomJoinEventHandler,SoftGear.Strix.Unity.Runtime.Event.FailureEventHandler,SoftGear.Strix.Client.Core.Request.RequestConfig)">
            <summary>
              Joins a random match room.
            </summary>
            <remarks>
              <b>Possible exception types in <see cref="T:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs"/>'s <see cref="P:SoftGear.Strix.Unity.Runtime.Event.FailureEventArgs.cause"/>:</b>
              <list type="table">
                <item>
                  <term><see cref="T:SoftGear.Strix.Unity.Runtime.Error.ErrorCodeException"/></term>
                  <description>
                    Strix error which can be further separated by an error code:
                    <list type="table">
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.ConnectionError"/></term>
                        <description>Failed to send the request because of a connection error.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.RequestTimeout"/></term>
                        <description>Server did not respond within the specified timeout interval.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.NoRoomsAvailable"/></term>
                        <description>Could not find joinable rooms.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotFound"/></term>
                        <description>Could not leave the current room before joining a new one. Either the room does not exist or you're not a member of this room.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.AlreadyInRoom"/></term>
                        <description>You are already joined to the room you're trying to join.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomFullOfMembers"/></term>
                        <description>The room you're trying to join has no room for new members.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.WrongRoomPassword"/></term>
                        <description>The room you're trying to join is password-protected and either you didn't provide any password or it didn't match.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.RoomNotJoinable"/></term>
                        <description>Cannot join the room because its owner has made it non-joinable.</description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.LockTimeout"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Room.Error.RoomErrorCode.MaxRoomCountReached"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.NoSuchProperty"/></term>
                        <description></description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidCredentialsType"/></term>
                        <description>
                          Credentials type does not match the server authentication configuration.
                          This can happen if, for example, the server is configured to authenticate by password instead of application ID.
                          On Strix Cloud this error should never occur since currently it always uses application ID authentication.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Error.StandardErrorCode.InternalError"/></term>
                        <description>
                          Internal server error. This can be caused by a bug or some other problem on the server and should be reported to the developers.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.UnsupportedLibraryVersion"/></term>
                        <description>
                          Current client library is not supported by the server.
                          This can happen if the client version is too old.
                          To fix this error, update the Strix SDK to the latest version.
                        </description>
                      </item>
                      <item>
                        <term><see cref="F:SoftGear.Strix.Client.Core.Auth.Error.AuthErrorCode.InvalidApplicationIdToken"/></term>
                        <description>
                          Application ID token provided via <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> does not match the one on the server.
                          Check if the application ID is the same as the one listed on Information tab of the Dashboard on the Strix Cloud web page.
                        </description>
                      </item>
                    </list>
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Net.Sockets.SocketException"/></term>
                  <description>An error occurred when attempting to access the socket.</description>
                </item>
                <item>
                  <term><see cref="T:System.Net.WebException"/></term>
                  <description>
                    There has been an error when connecting to the authentication server.<br/>
                    It's either an HTTP error such as 404/Not Found, or a network error like failure to resolve a DNS entry, a socket error, etc.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.ArgumentException"/></term>
                  <description>
                    When using an authentication server this error can happen if the server returns an invalid authorization token.<br/>
                    It could be an invalid UTF-8 string or an invalid JSON.
                  </description>
                </item>
                <item>
                  <term><see cref="T:System.Exception"/></term>
                  <description>
                    This can happen if the address for the given host couldn't be resolved when establishing socket connection.
                  </description>
                </item>
              </list>
            </remarks>
            <example>
              <b>Note:</b> Make sure to change the placeholder values of <see cref="P:SoftGear.Strix.Unity.Runtime.StrixNetwork.applicationId"/> and <c>host</c> to the real ones that can be found on the <see href="https://www.strixcloud.net/app/applist">Strix Cloud</see> application information tab.
              <code>
                using SoftGear.Strix.Unity.Runtime;
                using System.Collections.Generic;
                using UnityEngine;
                
                public class StrixJoinRandomRoomExample : MonoBehaviour
                {
                    void Start()
                    {
                        var strixNetwork = StrixNetwork.instance;
                
                        strixNetwork.applicationId = &quot;00000000-0000-0000-0000-000000000000&quot;;
                        strixNetwork.ConnectMasterServer(
                            host: &quot;0123456789abcdef01234567.game.strixcloud.net&quot;,
                            connectEventHandler: _ =&gt; {
                                Debug.Log(&quot;Connection established.&quot;);
                
                                strixNetwork.JoinRandomRoom(
                                    memberProperties: new RoomMemberProperties {
                                        name = &quot;My Player Name&quot;,
                                        properties = new Dictionary&lt;string, object&gt; {
                                            { &quot;hairColor&quot;, &quot;green&quot; }
                                        }
                                    },
                                    handler: __ =&gt; Debug.Log(&quot;Room joined.&quot;),
                                    failureHandler: joinError =&gt; Debug.LogError(&quot;Joining random room failed. Reason: &quot; + joinError.cause)
                                );
                            },
                            errorEventHandler: connectError =&gt; Debug.LogError(&quot;Connection failed. Reason: &quot; + connectError.cause)
                        );
                    }
                }
              </code>
            </example>
            <param name="memberProperties">These properties are set for your member after the room has been joined successfully.</param>
            <param name="handler">This callback is invoked when the room has been joined successfully.</param>
            <param name="failureHandler">This callback is invoked in case of a failure.</param>
            <param name="config">If not null, used to configure the request timeout. Default timeout is 30 seconds. See <see cref="T:SoftGear.Strix.Client.Core.Request.RequestConfig"/> for more details.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixNetwork.RespawnReplicas">
            <summary>
              Respawns game objects from replicas.
            </summary>
            <remarks>
              If the object is already present in the scene, it isn't respawned.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixReplicatorInstantiableBy">
            <summary>
            Describes who can instantiate the object.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicatorInstantiableBy.RoomOwner">
            <summary>
            Only the room owner can instantiate the object.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicatorInstantiableBy.Anyone">
            <summary>
            Any room member can instantiate the object.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixReplicatorConnectionClosedBehaviour">
            <summary>
            Describes what happens with the object when the connection is closed or when you leave the room.<br/>
            This is only applicable if you are the owner of the object.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicatorConnectionClosedBehaviour.ChangeOwnership">
            <summary>
            The object remains in the game but the ownership is transferred to another room member.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicatorConnectionClosedBehaviour.Delete">
            <summary>
            The object is destroyed.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixReplicator">
            <summary>
            The component that enables the synchronization of a game object using Strix Network.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.strixBehaviours">
            <summary>
            The list of all StrixBehaviours on this gameObject.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.objectType">
            <summary>
            Strix object type. Used to determine the type of object to be created on the remote clients.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.sendRate">
            <summary>
            Determines how often the synchronization of the variables is going to happen. (times per second)
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.syncDestroy">
            <summary>
            Determines if the local object should also be destroyed when it is destroyed on the owner's side.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.replica">
            <summary>
            Replica object reference.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.roomMember">
            <summary>
            Information about the room member who owns this object.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.networkInstanceId">
            <summary>
            Used to uniquely identify this object on the network.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.InstantiableBy">
            <summary>
            Determines if this object can be instantiated only by the room's owner or by anyone.
            This value should be set before spawning the object.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.ConnectionClosedBehaviour">
            <summary>
            Determines what happens with the object when the connection closes.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixReplicator.isSync">
            <summary>
            <see langword="true"/> if you are the owner of the object and the object is being synchronized over network; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixReplicator.isLocal">
            <summary>
            <see langword="true"/> if this object is not a representation of a remote object; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixReplicator.ownerUid">
            <summary>
            UID of the room member who owns this object.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixReplicator.SerializeProperties(System.Boolean)">
            <summary>
            Serializes the properties of all the StrixBehaviours on this game object and sends them over network.<br/>
            This method is called automatically as often as specified by the <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.sendRate"/> property.
            </summary>
            <param name="sync">If <see langword="false"/>, only <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.InstantiableBy"/> and <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.ConnectionClosedBehaviour"/> of the <see cref="T:SoftGear.Strix.Unity.Runtime.StrixReplicator"/> itself get synchronized.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixReplicator.SanitizeValueForServer(System.Object)">
            <summary>
            Converts negative signed bytes to short integers,
            since Java doesn't have a signed byte type
            and sending negative values of sbyte will crash the server.
            <para>
            This is a workaround for a server bug.
            Please delete this method and its usages when the Java side is fixed.
            </para>
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixReplicator.CheckCreationPossibility">
            <summary>
            Checks if the object can be instantiated by this client.
            </summary>
            <returns><see langword="true"/> if the current client is allowed to instantiate the object; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixReplicator.CheckEditPossibility">
            <summary>
            Checks if the object can be edited by this client.
            </summary>
            <returns><see langword="true"/> if the current client is allowed to edit the object; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixReplicatorIndexCache">
            <summary>
            A static class holding constants used in variable synchronization.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixReplicatorSettings">
            <summary>
            A scriptable object holding a list of all the replicators in the project.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixReplicatorSettings.replicators">
            <summary>
            A list of all the replicators in the project.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext">
            <summary>
            Data class containing the information about the received RPC call.
            </summary>
            <remarks>
            If you add this class as the last argument of a method marked with <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute"/> attribute,
            each time the RPC is called the information about the sender will be automatically supplied.
            You should not pass this argument manually when calling the RPC.
            </remarks>
            <example>
            In this example we use RPC to update character's health instead of a <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute">StrixSyncField</see> in order to add a visual effect when the hit was strong enough.
            We also use <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> to get information about the client who sent the RPC.
            <see href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnMouseDown.html">OnMouseDown</see> method is called by Unity when you click this object (the object also needs a collider).
            When this happens we invoke an RPC using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,System.Object[])">RpcToAll</see> method and pass the name of the method (&quot;Hit&quot;) along with the integer damage argument.
            Note that the actual Hit method has two arguments instead of one. The <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> argument is a special optional argument the data for which is supplied by Strix.
            Also note that we used <c>1</c> as a <see cref="P:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute.ProcedureCode">ProcedureCode</see> in <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute">StrixRpc</see> attribute.
            This is done to minimize the RPC network packet size since smaller values are better compressed. Although we have to make sure that we use each code only once.
            All the clients that receive the RPC check the damage amount independently and spawn a blood visual effect if the damage was greater than or equal to 5.
            This way the blood effect is fully local for each client and doesn't have to be replicated, and as a result the network traffic will also be reduced.
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            
            public class RpcExample : StrixBehaviour
            {
                public GameObject BloodPrefab;
                public int Health = 100;
            
                private void OnMouseDown()
                {
                    RpcToAll(&quot;Hit&quot;, Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage, StrixRpcContext strixRpcContext)
                {
                    Health = Mathf.Max(0, Health - damage);
            
                    if (damage &gt;= 5)
                        Instantiate(BloodPrefab, transform.position, Quaternion.identity);
            
                    Debug.Log(name + &quot; received &quot; + damage + &quot; damage from &quot; + strixRpcContext.sender.GetName());        
                }
            }
            </code>
            </example>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixRpcContext.senderUid">
            <summary>
            UID of the client who sent the RPC.
            </summary>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixRpcContext.sender">
            <summary>
            Information about the match room member who sent the RPC.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute">
            <summary>
            Marking a method with this attribute makes it an RPC that can be invoked from other clients in the same room using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.Rpc(System.String,System.Object[])"/>, <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,System.Object[])"/>, etc.
            </summary>
            <remarks>
            The method marked with this attribute must be a method of a StrixBehaviour-derived class.
            </remarks>
            <example>
            In this example we use RPC to update character's health instead of a <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute">StrixSyncField</see> in order to add a visual effect when the hit was strong enough.
            We also use <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> to get information about the client who sent the RPC.
            <see href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnMouseDown.html">OnMouseDown</see> method is called by Unity when you click this object (the object also needs a collider).
            When this happens we invoke an RPC using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,System.Object[])">RpcToAll</see> method and pass the name of the method (&quot;Hit&quot;) along with the integer damage argument.
            Note that the actual Hit method has two arguments instead of one. The <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> argument is a special optional argument the data for which is supplied by Strix.
            Also note that we used <c>1</c> as a <see cref="P:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute.ProcedureCode">ProcedureCode</see> in <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute">StrixRpc</see> attribute.
            This is done to minimize the RPC network packet size since smaller values are better compressed. Although we have to make sure that we use each code only once.
            All the clients that receive the RPC check the damage amount independently and spawn a blood visual effect if the damage was greater than or equal to 5.
            This way the blood effect is fully local for each client and doesn't have to be replicated, and as a result the network traffic will also be reduced.
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            
            public class RpcExample : StrixBehaviour
            {
                public GameObject BloodPrefab;
                public int Health = 100;
            
                private void OnMouseDown()
                {
                    RpcToAll(&quot;Hit&quot;, Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage, StrixRpcContext strixRpcContext)
                {
                    Health = Mathf.Max(0, Health - damage);
            
                    if (damage &gt;= 5)
                        Instantiate(BloodPrefab, transform.position, Quaternion.identity);
            
                    Debug.Log(name + &quot; received &quot; + damage + &quot; damage from &quot; + strixRpcContext.sender.GetName());        
                }
            }
            </code>
            </example>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute.ProcedureCode">
            <summary>
            Code used to identify the method.
            </summary>
            <remarks>
            Smaller values decrease the network packet size.
            Although, you have to be careful to keep the values unique across all the RPC methods on the current type.
            If set to 0, method name hash is used instead.
            The default value is 0.
            </remarks>
            <example>
            In this example we use RPC to update character's health instead of a <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute">StrixSyncField</see> in order to add a visual effect when the hit was strong enough.
            We also use <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> to get information about the client who sent the RPC.
            <see href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnMouseDown.html">OnMouseDown</see> method is called by Unity when you click this object (the object also needs a collider).
            When this happens we invoke an RPC using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.RpcToAll(System.String,System.Object[])">RpcToAll</see> method and pass the name of the method (&quot;Hit&quot;) along with the integer damage argument.
            Note that the actual Hit method has two arguments instead of one. The <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcContext"/> argument is a special optional argument the data for which is supplied by Strix.
            Also note that we used <c>1</c> as a <see cref="P:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute.ProcedureCode">ProcedureCode</see> in <see cref="T:SoftGear.Strix.Unity.Runtime.StrixRpcAttribute">StrixRpc</see> attribute.
            This is done to minimize the RPC network packet size since smaller values are better compressed. Although we have to make sure that we use each code only once.
            All the clients that receive the RPC check the damage amount independently and spawn a blood visual effect if the damage was greater than or equal to 5.
            This way the blood effect is fully local for each client and doesn't have to be replicated, and as a result the network traffic will also be reduced.
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            
            public class RpcExample : StrixBehaviour
            {
                public GameObject BloodPrefab;
                public int Health = 100;
            
                private void OnMouseDown()
                {
                    RpcToAll(&quot;Hit&quot;, Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage, StrixRpcContext strixRpcContext)
                {
                    Health = Mathf.Max(0, Health - damage);
            
                    if (damage &gt;= 5)
                        Instantiate(BloodPrefab, transform.position, Quaternion.identity);
            
                    Debug.Log(name + &quot; received &quot; + damage + &quot; damage from &quot; + strixRpcContext.sender.GetName());        
                }
            }
            </code>
            </example>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties">
            <summary>
            Class holding a map of property values to be synchronized.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.Int32,``0@)">
            <summary>
            Gets a synchronized value by an integer key.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="key">Integer key of the value to get.</param>
            <param name="value">When this method returns, contains the value if it was found. If the value was not found or a value of a type different from <typeparamref name="T"/> was found, the value that was passed is not changed.</param>
            <returns><see langword="true"/> if the value with the given key and of given type was present; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.Int32,System.Object,System.String)">
            <summary>
            Stores a value to be synchronized by an integer key.
            </summary>
            <remarks>
            If the value with the same key already exists, the method throws a <see cref="T:SoftGear.Strix.Unity.Runtime.ConflictingPropertyException"/>.
            </remarks>
            <param name="key">Integer key of the value to synchronize.</param>
            <param name="value">The value you want to synchronize.</param>
            <param name="description">Description of the value that is used to give more information in case of a key conflict.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.GetProperties">
            <summary>
            Gets the synchronized properties <c>Dictionary</c>.
            </summary>
            <returns>The synchronized properties <c>Dictionary</c>.</returns>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.String,``0@)">
            <summary>
            Gets a synchronized value by a string key.
            </summary>
            <remarks>
            In order to reduce data packet size you can associate the string key with a small negative integer value using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)" /> before calling this method.
            If the key is not registered beforehand, hash value is used instead.
            </remarks>
            <example>
<para>
In this example we use <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> to synchronize a game object's scale.
StrixSerializationProperties does not support custom classes and structures such as <see href="https://docs.unity3d.com/ScriptReference/Vector3.html">Vector3</see> so we will serialize <c>x</c>, <c>y</c>, and <c>z</c> separately.
</para>
<para>
First, in Start method we register readable names for the scale vector component using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)" />.
It is recommended to use negative index values,
because we need to avoid collisions with the property indexes defined by Strix,
and Strix libraries use positive values.
In order to minimize network packet size, we want to use values with the smallest absolute values possible.
We choose <c>-1</c>, <c>-2</c>, and <c>-3</c> in this example.
</para>
<para>
In Update we check if we are the owner of the object using <see cref="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.isSync" />. If yes, then we change the local scale of the object based on the movement of the mouse wheel.
Then we override both <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see>, and use them to write and read the scale values.
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> is called on the object owner's client with the frequency defined by <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.sendRate">sendRate</see> of <see cref="T:SoftGear.Strix.Unity.Runtime.StrixReplicator" /> attached to this object.
In it we take the current local scale values and put them into the serialization properties storage using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" /> and the string keys <c>"Scale X"</c>, <c>"Scale Y"</c>, and <c>"Scale Z"</c> that we have registered in the Start method.
On the other clients,
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> is called
where we read the values back with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.String,``0@)" /> and apply them to the transform.
</para>
<para>
As an option, we could have also used <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.Int32,System.Object,System.String)" />
and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.Int32,``0@)" /> overloads
and <c>-1</c>, <c>-2</c>, and <c>-3</c> values directly,
instead of registering them with string keys beforehand.
</para>
<code>
<![CDATA[
using SoftGear.Strix.Unity.Runtime;
using UnityEngine;

public class StrixSerializeExample : StrixBehaviour
{
    private void Start()
    {
        StrixSerializationProperties.RegisterIndexOfProperty("Scale X", -1);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Y", -2);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Z", -3);
    }

    private void Update()
    {
        if (isSync) {
            if (Input.mouseScrollDelta.y > 0)
                transform.localScale *= 1.1f;
            else if (Input.mouseScrollDelta.y < 0)
                transform.localScale /= 1.1f;
        }
    }

    public override void OnStrixSerialize(StrixSerializationProperties properties)
    {
        properties.Set("Scale X", transform.localScale.x);
        properties.Set("Scale Y", transform.localScale.y);
        properties.Set("Scale Z", transform.localScale.z);

        base.OnStrixSerialize(properties);
    }

    public override void OnStrixDeserialize(StrixSerializationProperties properties)
    {
        base.OnStrixDeserialize(properties);

        float x = 0f, y = 0f, z = 0f;
        properties.Get("Scale X", ref x);
        properties.Get("Scale Y", ref y);
        properties.Get("Scale Z", ref z);

        transform.localScale = new Vector3(x, y, z);
    }
}
]]>
</code>
</example>
            <typeparam name="T">Type of the value</typeparam>
            <param name="key">String key of the value to get.</param>
            <param name="value">When this method returns, contains the value if it was found. If the value was not found or a value of a type different from <typeparamref name="T" /> was found, the value that was passed is not changed.</param>
            <returns><see langword="true" /> if the value with the given key and of given type was present; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)">
            <summary>
            Stores a value to be synchronized by a string key.
            </summary>
            <remarks>
            If the value with the same key already exists, the method throws an <see cref="T:SoftGear.Strix.Unity.Runtime.ConflictingPropertyException" />.
            In order to reduce data packet size you can associate the string key with a small negative integer value using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)" /> before calling this method.
            If the key is not registered beforehand, hash value is used instead.
            </remarks>
            <example>
<para>
In this example we use <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> to synchronize a game object's scale.
StrixSerializationProperties does not support custom classes and structures such as <see href="https://docs.unity3d.com/ScriptReference/Vector3.html">Vector3</see> so we will serialize <c>x</c>, <c>y</c>, and <c>z</c> separately.
</para>
<para>
First, in Start method we register readable names for the scale vector component using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)" />.
It is recommended to use negative index values,
because we need to avoid collisions with the property indexes defined by Strix,
and Strix libraries use positive values.
In order to minimize network packet size, we want to use values with the smallest absolute values possible.
We choose <c>-1</c>, <c>-2</c>, and <c>-3</c> in this example.
</para>
<para>
In Update we check if we are the owner of the object using <see cref="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.isSync" />. If yes, then we change the local scale of the object based on the movement of the mouse wheel.
Then we override both <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see>, and use them to write and read the scale values.
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> is called on the object owner's client with the frequency defined by <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.sendRate">sendRate</see> of <see cref="T:SoftGear.Strix.Unity.Runtime.StrixReplicator" /> attached to this object.
In it we take the current local scale values and put them into the serialization properties storage using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" /> and the string keys <c>"Scale X"</c>, <c>"Scale Y"</c>, and <c>"Scale Z"</c> that we have registered in the Start method.
On the other clients,
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> is called
where we read the values back with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.String,``0@)" /> and apply them to the transform.
</para>
<para>
As an option, we could have also used <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.Int32,System.Object,System.String)" />
and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.Int32,``0@)" /> overloads
and <c>-1</c>, <c>-2</c>, and <c>-3</c> values directly,
instead of registering them with string keys beforehand.
</para>
<code>
<![CDATA[
using SoftGear.Strix.Unity.Runtime;
using UnityEngine;

public class StrixSerializeExample : StrixBehaviour
{
    private void Start()
    {
        StrixSerializationProperties.RegisterIndexOfProperty("Scale X", -1);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Y", -2);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Z", -3);
    }

    private void Update()
    {
        if (isSync) {
            if (Input.mouseScrollDelta.y > 0)
                transform.localScale *= 1.1f;
            else if (Input.mouseScrollDelta.y < 0)
                transform.localScale /= 1.1f;
        }
    }

    public override void OnStrixSerialize(StrixSerializationProperties properties)
    {
        properties.Set("Scale X", transform.localScale.x);
        properties.Set("Scale Y", transform.localScale.y);
        properties.Set("Scale Z", transform.localScale.z);

        base.OnStrixSerialize(properties);
    }

    public override void OnStrixDeserialize(StrixSerializationProperties properties)
    {
        base.OnStrixDeserialize(properties);

        float x = 0f, y = 0f, z = 0f;
        properties.Get("Scale X", ref x);
        properties.Get("Scale Y", ref y);
        properties.Get("Scale Z", ref z);

        transform.localScale = new Vector3(x, y, z);
    }
}
]]>
</code>
</example>
            <param name="key">String key of the value to synchronize.</param>
            <param name="value">The value you want to synchronize.</param>
            <param name="description">Description of the value that is used to give more information in case of a key conflict.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)">
            <summary>
            Associates a string key with an integer value. Used in conjunction with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" /> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.String,``0@)" />.
            </summary>
            <remarks>
            <para>
            When serializing properties, you have an option to use an integer (<see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.Int32,System.Object,System.String)" />) or a string (<see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" />), e.g. a property name, as a key.
            When using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" />, the string key is still replaced with an integer code, and by default the code is the hash value calculated from the string.
            You can change this behaviour by explicitly registering a specific string with a specific integer code using this method.
            Since smaller absolute values are compressed better at serialization level, this can be useful for reducing network traffic,
            although you have to be careful not to use a same code value twice.
            </para>
            <para>
            Strix libraries use positive integer code values for properties defined by Strix itself.
            To avoid any possible collisions, user-provided scripts should use negative values.
            </para>
            </remarks>
            <example>
<para>
In this example we use <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> to synchronize a game object's scale.
StrixSerializationProperties does not support custom classes and structures such as <see href="https://docs.unity3d.com/ScriptReference/Vector3.html">Vector3</see> so we will serialize <c>x</c>, <c>y</c>, and <c>z</c> separately.
</para>
<para>
First, in Start method we register readable names for the scale vector component using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.RegisterIndexOfProperty(System.String,System.Int32)" />.
It is recommended to use negative index values,
because we need to avoid collisions with the property indexes defined by Strix,
and Strix libraries use positive values.
In order to minimize network packet size, we want to use values with the smallest absolute values possible.
We choose <c>-1</c>, <c>-2</c>, and <c>-3</c> in this example.
</para>
<para>
In Update we check if we are the owner of the object using <see cref="P:SoftGear.Strix.Unity.Runtime.StrixBehaviour.isSync" />. If yes, then we change the local scale of the object based on the movement of the mouse wheel.
Then we override both <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see>, and use them to write and read the scale values.
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixSerialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixSerialize</see> is called on the object owner's client with the frequency defined by <see cref="F:SoftGear.Strix.Unity.Runtime.StrixReplicator.sendRate">sendRate</see> of <see cref="T:SoftGear.Strix.Unity.Runtime.StrixReplicator" /> attached to this object.
In it we take the current local scale values and put them into the serialization properties storage using <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.String,System.Object,System.String)" /> and the string keys <c>"Scale X"</c>, <c>"Scale Y"</c>, and <c>"Scale Z"</c> that we have registered in the Start method.
On the other clients,
<see cref="M:SoftGear.Strix.Unity.Runtime.StrixBehaviour.OnStrixDeserialize(SoftGear.Strix.Unity.Runtime.StrixSerializationProperties)">OnStrixDeserialize</see> is called
where we read the values back with <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.String,``0@)" /> and apply them to the transform.
</para>
<para>
As an option, we could have also used <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Set(System.Int32,System.Object,System.String)" />
and <see cref="M:SoftGear.Strix.Unity.Runtime.StrixSerializationProperties.Get``1(System.Int32,``0@)" /> overloads
and <c>-1</c>, <c>-2</c>, and <c>-3</c> values directly,
instead of registering them with string keys beforehand.
</para>
<code>
<![CDATA[
using SoftGear.Strix.Unity.Runtime;
using UnityEngine;

public class StrixSerializeExample : StrixBehaviour
{
    private void Start()
    {
        StrixSerializationProperties.RegisterIndexOfProperty("Scale X", -1);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Y", -2);
        StrixSerializationProperties.RegisterIndexOfProperty("Scale Z", -3);
    }

    private void Update()
    {
        if (isSync) {
            if (Input.mouseScrollDelta.y > 0)
                transform.localScale *= 1.1f;
            else if (Input.mouseScrollDelta.y < 0)
                transform.localScale /= 1.1f;
        }
    }

    public override void OnStrixSerialize(StrixSerializationProperties properties)
    {
        properties.Set("Scale X", transform.localScale.x);
        properties.Set("Scale Y", transform.localScale.y);
        properties.Set("Scale Z", transform.localScale.z);

        base.OnStrixSerialize(properties);
    }

    public override void OnStrixDeserialize(StrixSerializationProperties properties)
    {
        base.OnStrixDeserialize(properties);

        float x = 0f, y = 0f, z = 0f;
        properties.Get("Scale X", ref x);
        properties.Get("Scale Y", ref y);
        properties.Get("Scale Z", ref z);

        transform.localScale = new Vector3(x, y, z);
    }
}
]]>
</code>
</example>
            <param name="propertyName">Name of the property.</param>
            <param name="code">Integer code to be associated with the property name.</param>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute">
            <summary>
            An attribute for automatic variable synchronization.
            </summary>
            <remarks>
            Marking a field with this attribute will automatically detect value changes and synchronize it across all clients in the match room.
            Only changes made by the owner of the object get synchronized.
            </remarks>
            <example>
            <code>
            using SoftGear.Strix.Unity.Runtime;
            using UnityEngine;
            using UnityEngine.UI;
            
            public class StrixSyncFieldExample : StrixBehaviour
            {
                [StrixSyncField]
                public int Health = 100;
                public Image HealthBar;
            
                private void OnMouseDown()
                {
                    Rpc(&quot;Hit&quot;, Random.Range(3, 8));
                }
            
                [StrixRpc(ProcedureCode = 1)]
                public void Hit(int damage)
                {
                    Health = Mathf.Max(0, Health - damage);
                }
            
                public void Update()
                {
                    HealthBar.fillAmount = Health / 100f;
                }
            }
            </code>
            </example>
        </member>
        <member name="P:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute.FieldCode">
            <summary>
            Code used to identify the field.
            </summary>
            <remarks>
            Smaller values decrease the network packet size.
            Although, you have to be careful to keep the values unique across all the fields on the current type.
            If set to 0, field name hash is used instead.
            The default value is 0.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixTransformSynchronizer">
            <summary>
            A component that provides automatic synchronization for physical objects.
            </summary>
            <remarks>
            If <see cref="T:UnityEngine.Rigidbody"/> component is attached, <see cref="T:UnityEngine.Rigidbody"/> values such as <see cref="P:UnityEngine.Rigidbody.velocity"/> and <see cref="F:SoftGear.Strix.Unity.Runtime.StrixTransformSynchronizer.angularVelocity"/>, will be used to perform interpolation.
            Otherwise, just uses <see cref="P:UnityEngine.Transform.position"/> and <see cref="P:UnityEngine.Transform.rotation"/> history for interpolation.
            </remarks>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixTransformSynchronizer.syncPosition">
            <summary>
            If set to <see langword="true"/>, will synchronize the object's position.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixTransformSynchronizer.syncRotation">
            <summary>
            If set to <see langword="true"/>, will synchronize the object's rotation.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixTransformSynchronizer.syncVelocity">
            <summary>
            If set to <see langword="true"/>, will synchronize the object's velocity.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixTransformSynchronizer.syncAngularVelocity">
            <summary>
            If set to <see langword="true"/>, will synchronize the object's angular velocity.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer">
            <summary>
              Synchronizer suitable for synchronizing vehicles such as cars and planes.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.PredictionData">
            <summary>
              Prediction data that can be used to calculate extrapolated position and rotation of the vehicle.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.PredictionData.FuturePosition">
            <summary>
              Predicted position of the vehicle at some point in the future based on predictionTime.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.PredictionData.CurrentPosition">
            <summary>
              Predicted position of the vehicle at this point in time.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.PredictionData.FutureRotation">
            <summary>
              Predicted rotation of the vehicle at some point in the future based on predictionTime.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.PredictionData.TimeDelta">
            <summary>
              How many seconds ago the vehicle was at <see cref="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.currentPosition"/> with <see cref="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.currentVelocity"/>, <see cref="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.currentAcceleration"/>, <see cref="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.currentAngularVelocity"/>, and <see cref="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.currentAngularAcceleration"/>.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.positionTransform">
            <summary>
              Transform used to calculate and apply position. If not set current gameObject's transform is used.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.rotationTransform">
            <summary>
              Transform used to calculate and apply rotation. If not set current gameObject's transform is used.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.predictionTime">
            <summary>
              Determines how far into the future the position is predicted.
              This value infulences the smoothness of the approximated trajectory.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.snapDistance">
            <summary>
              Used to determine if the object reached the target position.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.teleportDistance">
            <summary>
              Used to determine if the object should be teleported to the target position.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.approximatorAcceleration">
            <summary>
              Acceleration value used in the approximator.
              Set this value to the object's maximum acceleration.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.approximatorAngularAcceleration">
            <summary>
              Angular acceleration value used in the approximator.
              Set this value to the object's maximum angular acceleration.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.updateMode">
            <summary>
              If you update position and rotation of the vehicle in update, should be set to Update.
              If you update position and rotation of the vehicle in FixedUpdate, should be set to FixedUpdate.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.AveragingWindowWidth">
            <summary>
              Determines how many frames of position history will be used when calculating velocity.
              Only used when UpdateMode is set to Update. Minimum value is 2. When set to 2, no averaging is applied.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.ApplyPredictionData(SoftGear.Strix.Unity.Runtime.StrixVehicleMovementSynchronizer.PredictionData)">
            <summary>
              Error correction function. Overload this to implement your own error correction.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.UrlParseResult">
            <summary>
            Contains the result of input connection string parsing.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.UrlParseResult.Scheme">
            <summary>
            URL scheme that can be used to determine the protocol.
            The contents are not checked during parsing so the scheme can be invalid. Can be null.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.UrlParseResult.Host">
            <summary>
            Domain name or IP address.
            The contents are not checked during parsing so it can be invalid. Cannot be null.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.UrlParseResult.Port">
            <summary>
            Port number, if any. Can be null if the input string does not contain port information.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Unity.Runtime.UrlParseResult.Path">
            <summary>
            Optional path. Can be used in WebSocket connections.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.UrlParseResult.Parse(System.String)">
            <summary>
            Splits input host string into four distinct parts:
            URL scheme that can be used to determine the protocol,
            actual host domain name or IP address, port number
            and path for use in WebSocket connections.
            </summary>
            <param name="url">Input connection URL string.</param>
            <returns>The result of the parsing.</returns>
            <exception cref="T:SoftGear.Strix.Unity.Runtime.UrlParseException">Thrown if input string cannot be parsed.</exception>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.UrlParseException">
            <summary>
            Thrown if input connection string cannot not be parsed.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.UrlParseException.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:SoftGear.Strix.Unity.Runtime.UrlParseException"/> with a specific message.
            </summary>
            <param name="message">Parsing error description.</param>
        </member>
        <member name="M:SoftGear.Strix.Unity.Runtime.Util.TypeConverter.TryCoerceToUnsignedInteger(System.Type,System.Type,System.Object,System.Object@)">
            <summary>
            <para>Tries to coerce a signed integer value to an unsigned integer type.</para>
            <para>
            This method is needed only as a workaround for <see cref="T:SoftGear.Strix.Unity.Runtime.StrixSyncFieldAttribute">SyncFields</see> and RPCs.
            Java doesn't have unsigned integer data types so values of those types
            are transformed on the server in the following way:
            <list type="bullet">
            <item><description>bytes (uint8) are converted to shorts (int16)</description></item>
            <item><description>ushorts (uint16) are converted to ints (int32)</description></item>
            <item><description>uints (uint32) are converted to longs (int64)</description></item>
            <item><description>ulongs (uint64) are converted to longs (int64)</description></item>
            </list>
            Also, sbytes are converted to shorts on the client side as a workaround for causing the server to crash.
            Since SyncFields are using replica properties, which is a <see cref="T:System.Collections.Generic.Dictionary`2"/>,
            they are deserialized as <see langword="object"/>s.
            In the same way, <see cref="T:SoftGear.Strix.Unity.Runtime.Rpc.RpcMessageSerializer"/> deserializes each RPC argument as an <see langword="object"/>.
            </para>
            <para>
            The fix for this would be to use values of the same bit width on the server
            and maybe store some meta info with every value to serialize them back correctly.
            Please delete this method and its usages when the Java side is fixed.
            </para>
            </summary>
            <param name="targetType">Type of the target variable.</param>
            <param name="sourceType">Type of the source value.</param>
            <param name="sourceValue">Source value.</param>
            <param name="result">Variable where the result will be stored if the coercion is successful; <see langword="null"/> otherwise.</param>
            <returns><see langword="true"/> if the coercion is successful; <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.Exception">Thrown if the source type was eligible for a coercion, but the source value was outside the range of the target type.</exception>
        </member>
        <member name="T:SoftGear.Strix.Unity.Runtime.Util.UnityLogHandler">
            <summary>
            Log handler to redirect Strix log messages to Unity console.
            </summary>
        </member>
    </members>
</doc>
