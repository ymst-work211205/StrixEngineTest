<?xml version="1.0"?>
<doc>
    <assembly>
        <name>strix-client-csharp-core</name>
    </assembly>
    <members>
        <member name="T:SoftGear.Strix.Client.Core.CoreService">
            <summary>
            Class used for initialization of the core service.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.CoreService.Init">
            <summary>
            Registers message and error classes needed for the proper functioning of the core service.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.IModel">
            <summary>
            Data model interface.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.IModel.GetPrimaryKey">
            <summary>
            Gets the primary key of the model object.
            </summary>
            <returns>Primary key value.</returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.IModel.SetPrimaryKey(System.Int64)">
            <summary>
            Sets the primary key of the model object.
            </summary>
            <param name="id">Primary key value.</param>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.And">
            <summary>
            And condition.
            </summary>
            <remarks>
            Checks if all conditions in a list are valid.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.ConditionBuilder">
            <summary>
            Class providing a fluent interface for creating search conditions.
            </summary>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.ExpectingFieldClause.Field(System.String)">
            <summary>
            Specifies a model field by its name. The field is later used to apply a condition to it.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.EqualTo(System.Object)">
            <summary>
            Creates a condition where current field is equal to a specified value.
            </summary>
            <example>
            <code>
            /// Given that some model has fields:
            ///     name = &quot;Rocket&quot;
            ///     age = 32
            /// the following conditions will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;name&quot;).EqualTo(&quot;Rocket&quot;).Build(); // this condition will be true
            var condition2 = ConditionBuilder.Builder().Field(&quot;name&quot;).EqualTo(&quot;rocket&quot;).Build(); // this condition will be false because text comparison is case-sensitive
            var condition3 = ConditionBuilder.Builder().Field(&quot;name&quot;).EqualTo(&quot;Spice&quot;).Build(); // this condition will be false because the values are different
            var condition4 = ConditionBuilder.Builder().Field(&quot;age&quot;).EqualTo(32).Build(); // this condition will be true
            var condition5 = ConditionBuilder.Builder().Field(&quot;age&quot;).EqualTo(45).Build(); // this condition will be false because the values are different
            var condition6 = ConditionBuilder.Builder().Field(&quot;age&quot;).EqualTo(&quot;32&quot;).Build(); // this condition will be false because types of the values don&apos;t match
            </code>
            </example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.EqualTo(SoftGear.Strix.Client.Core.Model.Manager.Filter.Field)">
            <summary>
            Creates a condition where current field is equal to another field.
            </summary>
            <example>
            <code>
            /// Given that some model has fields:
            ///     ownerName = &quot;Sly&quot;
            ///     roomName = &quot;Fishing&quot;
            ///     moderatorName = &quot;Sly&quot;
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;ownerName&quot;).EqualTo(new Field(&quot;moderatorName&quot;)).Build(); // this condition will be true because both ownerName and moderatorName are set to &quot;Sly&quot;
            var condition2 = ConditionBuilder.Builder().Field(&quot;ownerName&quot;).EqualTo(new Field(&quot;roomName&quot;)).Build(); // this condition will be false because field values are different; ownerName is &quot;Sly&quot; and roomName is &quot;Fishing&quot;
            </code>
            </example>
            <param name="otherField">Another field.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.NotEqualTo(System.Object)">
            <summary>
            Creates a condition where current field is not equal a specified value.
            </summary>
            <example>
            <code>
            /// Given that some model has fields:
            ///     name = &quot;Rocket&quot;
            ///     age = 32
            /// the following conditions will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;name&quot;).NotEqualTo(&quot;Rocket&quot;).Build(); // this condition will be false because the values are the same
            var condition2 = ConditionBuilder.Builder().Field(&quot;name&quot;).NotEqualTo(&quot;rocket&quot;).Build(); // this condition will be true because text comparison is case-sensitive and the values are deemed not equal
            var condition3 = ConditionBuilder.Builder().Field(&quot;name&quot;).NotEqualTo(&quot;Spice&quot;).Build(); // this condition will be true because the values are different
            var condition4 = ConditionBuilder.Builder().Field(&quot;age&quot;).NotEqualTo(32).Build(); // this condition will be false because the values are the same
            var condition5 = ConditionBuilder.Builder().Field(&quot;age&quot;).NotEqualTo(45).Build(); // this condition will be true because the values are different
            </code>
            </example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.NotEqualTo(SoftGear.Strix.Client.Core.Model.Manager.Filter.Field)">
            <summary>
            Creates a condition where current field is not equal to another field.
            </summary>
            <example>
            <code>
            /// Given that some model has fields:
            ///     ownerName = &quot;Sly&quot;
            ///     roomName = &quot;Fishing&quot;
            ///     moderatorName = &quot;Sly&quot;
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;ownerName&quot;).NotEqualTo(new Field(&quot;moderatorName&quot;)).Build(); // this condition will be false because both ownerName and moderatorName are set to &quot;Sly&quot;
            var condition2 = ConditionBuilder.Builder().Field(&quot;ownerName&quot;).NotEqualTo(new Field(&quot;roomName&quot;)).Build(); // this condition will be true because field values are different; ownerName is &quot;Sly&quot; and roomName is &quot;Fishing&quot;
            </code>
            </example>
            <param name="otherField">Another field.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.GreaterThan(System.Object)">
            <summary>
            Creates a condition where current field is strictly greater than a specified value.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 14
            ///     capacity = 32
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).GreaterThan(8).Build(); // this condition will be true because 14 is greater than 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).GreaterThan(14).Build(); // this condition will be false because the values are the same and the field&apos;s value must be strictly greater
            var condition3 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).GreaterThan(41).Build(); // this condition will be false because the 32 is less than 41
            </code>
            </example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.GreaterThan(SoftGear.Strix.Client.Core.Model.Manager.Filter.Field)">
            <summary>
            Creates a condition where current field is strictly greater than another field.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 3
            ///     capacity = 8
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).GreaterThan(new Field(&quot;memberCount&quot;)).Build(); // this condition will be true because 8 is greater than 3
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).GreaterThan(new Field(&quot;capacity&quot;)).Build(); // this condition will be false because 3 is less than 8
            </code>
            </example>
            <param name="otherField">Another field.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.GreaterThanEquals(System.Object)">
            <summary>
            Creates a condition where current field is greater or equal to a specified value.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 14
            ///     capacity = 32
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).GreaterThanEquals(8).Build(); // this condition will be true because 14 is greater than 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).GreaterThanEquals(14).Build(); // this condition will be true because the values are equal
            var condition3 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).GreaterThanEquals(41).Build(); // this condition will be false because the 32 is less than 41
            </code>
            </example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.GreaterThanEquals(SoftGear.Strix.Client.Core.Model.Manager.Filter.Field)">
            <summary>
            Creates a condition where current field is greater or equal to another field.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 8
            ///     capacity = 8
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).GreaterThanEquals(new Field(&quot;memberCount&quot;)).Build(); // this condition will be true because both capacity and memberCount are 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).GreaterThanEquals(new Field(&quot;capacity&quot;)).Build(); // this condition will be true because both capacity and memberCount are 8
            </code>
            </example>
            <param name="otherField">Another field.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.LessThan(System.Object)">
            <summary>
            Creates a condition where current field is strictly less than a specified value.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 14
            ///     capacity = 32
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).LessThan(8).Build(); // this condition will be false because 14 is greater than 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).LessThan(14).Build(); // this condition will be false because the values are the same and the field&apos;s value must be strictly less
            var condition3 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).LessThan(41).Build(); // this condition will be true because the 32 is less than 41
            </code>
            </example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.LessThan(SoftGear.Strix.Client.Core.Model.Manager.Filter.Field)">
            <summary>
            Creates a condition where current field is strictly less than another field.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 3
            ///     capacity = 8
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).LessThan(new Field(&quot;memberCount&quot;)).Build(); // this condition will be true because 3 is less than 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).LessThan(new Field(&quot;capacity&quot;)).Build(); // this condition will be false because 8 is greater than 3
            </code>
            </example>
            <param name="otherField">Another field.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.LessThanEquals(System.Object)">
            <summary>
            Creates a condition where current field is less or equal to a specified value.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 14
            ///     capacity = 32
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).LessThanEquals(8).Build(); // this condition will be false because 14 is greater than 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).LessThanEquals(14).Build(); // this condition will be true because the values are equal
            var condition3 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).LessThanEquals(41).Build(); // this condition will be true because the 32 is less than 41
            </code>
            </example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.LessThanEquals(SoftGear.Strix.Client.Core.Model.Manager.Filter.Field)">
            <summary>
            Creates a condition where current field is less or equal to another field.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 8
            ///     capacity = 8
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).LessThanEquals(new Field(&quot;memberCount&quot;)).Build(); // this condition will be true because both capacity and memberCount are 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).LessThanEquals(new Field(&quot;capacity&quot;)).Build(); // this condition will be true because both capacity and memberCount are 8
            </code>
            </example>
            <param name="otherField">Another field.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.BetweenExclusive(System.Object,System.Object)">
            <summary>
            Creates a condition where current field is strictly greater than a specified lower bound and strictly less than a specified upper bound.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 4
            ///     capacity = 10
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).BetweenExclusive(2, 8).Build(); // this condition will be true because 4 is greater than 2 and less than 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).BetweenExclusive(4, 8).Build(); // this condition will be false because the range is exclusive so memberCount has to be either 5, 6, or 7
            var condition3 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).BetweenExclusive(15, 20).Build(); // this condition will be false because 10 is less than 15
            </code>
            </example>
            <param name="lowerBound">Lower bound (not included).</param>
            <param name="upperBound">Upper bound (not included).</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.BetweenInclusive(System.Object,System.Object)">
            <summary>
            Creates a condition where current field is greater than or equal to a specified lower bound and less than or equal to a specified upper bound.
            </summary>
            <remarks>Only applies to numerical fields.</remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     memberCount = 4
            ///     capacity = 10
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).BetweenInclusive(2, 8).Build(); // this condition will be true because 4 is greater than 2 and less than 8
            var condition2 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).BetweenInclusive(4, 8).Build(); // this condition will be true because the range is inclusive and 4 is equal to the lower bound
            var condition3 = ConditionBuilder.Builder().Field(&quot;capacity&quot;).BetweenInclusive(15, 20).Build(); // this condition will be false because 10 is less than 15
            </code>
            </example>
            <param name="lowerBound">Lower bound (included).</param>
            <param name="upperBound">Upper bound (included).</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.Like(System.Object[])">
            <summary>
            Creates a condition where current field matches a specific text pattern.
            </summary>
            <remarks>
            Only applies to text fields.<br/>
            Text comparison is case-sensitive.
            </remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     description = &quot;Number 1 round&quot;
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;description&quot;).Like(&quot;Number &quot;, TextFilterType.SINGLE_CHARACTER_WILDCARD, &quot; round&quot;, TextFilterType.MULTIPLE_CHARACTERS_WILDCARD).Build(); // this condition will be true
            </code>
            </example>
            <param name="tokens">A list of tokens describing a text pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.StartsWith(System.String)">
            <summary>
            Creates a condition where current field starts with a specific text.
            </summary>
            <remarks>
            Only applies to text fields.<br/>
            Text comparison is case-sensitive.
            </remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     name = &quot;Black Swan&quot;
            ///     description = &quot;1 day ago&quot;
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;name&quot;).StartsWith(&quot;Black&quot;).Build(); // this condition will be true
            var condition2 = ConditionBuilder.Builder().Field(&quot;name&quot;).StartsWith(&quot;black&quot;).Build(); // this condition will be false because comparison is case-sensitive
            var condition3 = ConditionBuilder.Builder().Field(&quot;description&quot;).StartsWith(&quot;day&quot;).Build(); // this condition will be false because &quot;day&quot; is not at the beginning of the description string
            </code>
            </example>
            <param name="prefix">Prefix used in text comparison.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.EndsWith(System.String)">
            <summary>
            Creates a condition where current field ends with a specific text.
            </summary>
            <remarks>
            Only applies to text fields.<br/>
            Text comparison is case-sensitive.
            </remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     name = &quot;First game of August&quot;
            ///     description = &quot;Only club members are allowed&quot;
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;name&quot;).EndsWith(&quot;August&quot;).Build(); // this condition will be true
            var condition2 = ConditionBuilder.Builder().Field(&quot;name&quot;).EndsWith(&quot;august&quot;).Build(); // this condition will be false because comparison is case-sensitive
            var condition3 = ConditionBuilder.Builder().Field(&quot;description&quot;).EndsWith(&quot;members&quot;).Build(); // this condition will be false because &quot;members&quot; is not at the end of the description string
            </code>
            </example>
            <param name="suffix">Suffix used in text comparison.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.Contains(System.String)">
            <summary>
            Creates a condition where current field contains a specific text.
            </summary>
            <remarks>
            Only applies to text fields.<br/>
            Text comparison is case-sensitive.
            </remarks>
            <example>
            <code>
            /// Given that some model has fields:
            ///     name = &quot;Over the Milky Way&quot;
            ///     description = &quot;Capture the flag of despair&quot;
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;name&quot;).Contains(&quot;Milk&quot;).Build(); // this condition will be true
            var condition2 = ConditionBuilder.Builder().Field(&quot;name&quot;).Contains(&quot;milk&quot;).Build(); // this condition will be false because comparison is case-sensitive
            var condition3 = ConditionBuilder.Builder().Field(&quot;description&quot;).Contains(&quot;flag&quot;).Build(); // this condition will be true
            </code>
            </example>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.SurroundedBy(System.String,System.String)">
            <summary>
            Creates a condition where current field has some text surrounded by specified strings.
            </summary>
            <remarks>
            Only applies to text fields.<br/>
            Text comparison is case-sensitive.
            </remarks>
            <param name="leftSide">String to the left of the text.</param>
            <param name="rightSide">String to the right of the text.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.In(System.Object[])">
            <summary>
            Creates a condition where current field is equal to one of the specified values.
            </summary>
            <example>
            <code>
            /// Given that some model has fields:
            ///     name = &quot;Third&quot;
            ///     memberCount = 4
            /// the following conditions applied to this model will yield the following results
            var condition1 = ConditionBuilder.Builder().Field(&quot;name&quot;).In(&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;).Build(); // this condition will be true because &quot;Third&quot; can be found in the spicified list
            var condition2 = ConditionBuilder.Builder().Field(&quot;name&quot;).In(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;).Build(); // this condition will be false because comparison is case-sensitive
            var condition3 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).In(1, 3, 5, 7).Build(); // this condition will be false because 4 is not in the list
            </code>
            </example>
            <param name="values">A list of values for comparison.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.InCollection(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Creates a condition where current field is equal to one of the values in a specified collection.
            </summary>
            <example>
            <code>
            /// Given that some model has fields:
            ///     name = &quot;Third&quot;
            ///     memberCount = 4
            /// the following conditions applied to this model will yield the following results
            var list1 = new List&lt;string&gt; { &quot;First&quot;, &quot;Second&quot;, &quot;Third&quot; };
            var list2 = new List&lt;string&gt; { &quot;first&quot;, &quot;second&quot;, &quot;third&quot; };
            var list3 = new List&lt;string&gt; { 1, 3, 5, 7 };
            var condition1 = ConditionBuilder.Builder().Field(&quot;name&quot;).InCollection(list1).Build(); // this condition will be true because &quot;Third&quot; can be found in the spicified list
            var condition2 = ConditionBuilder.Builder().Field(&quot;name&quot;).InCollection(list2).Build(); // this condition will be false because comparison is case-sensitive
            var condition3 = ConditionBuilder.Builder().Field(&quot;memberCount&quot;).InCollection(list3).Build(); // this condition will be false because 4 is not in the list 
            </code>
            </example>
            <param name="values">A collection of values for comparison.</param>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.IsNull">
            <summary>
            Creates a condition where current field is null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftGear.Strix.Client.Core.Model.Manager.Filter.Builder.FieldClauseBuilder.IsNotNull">
            <summary>
            Creates a condition where current field is not null.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.Equals">
            <summary>
            Equals condition.
            </summary>
            <remarks>
            Checks if the value of a field is equal to the specified value.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.Field">
            <summary>
            Class representing a model field reference used in search conditions.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.GreaterThan">
            <summary>
            GreaterThan condition.
            </summary>
            <remarks>
            Checks if the value of a field is greater than the specified value.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.GreaterThanEquals">
            <summary>
            GreaterThanEquals condition.
            </summary>
            <remarks>
            Checks if the value of a field is greater than or equal to the specified value.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.ICondition">
            <summary>
            An interface for search conditions.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.IsNotNull">
            <summary>
            IsNull condition.
            </summary>
            <remarks>
            Checks if the specified value is not null.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.IsNull">
            <summary>
            IsNull condition.
            </summary>
            <remarks>
            Checks if the specified value is null.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.IValueType">
            <summary>
            A common interface for values used in search conditions.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.LessThan">
            <summary>
            LessThan condition.
            </summary>
            <remarks>
            Checks if the value of a field is less than the specified value.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.LessThanEquals">
            <summary>
            LessThanEquals condition.
            </summary>
            <remarks>
            Checks if the value of a field is less than or equal to the specified value.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.Like">
            <summary>
            Like condition.
            </summary>
            <remarks>
            Checks if the value of a string field matches the specified value based on a <see cref="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilter"/>.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.NotEquals">
            <summary>
            NotEquals condition.
            </summary>
            <remarks>
            Checks if the value of a field is not equal to the specified value.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.NotLike">
            <summary>
            NotLike condition.
            </summary>
            <remarks>
            Checks if the value of a string field doesn't match the specified value based on a <see cref="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilter"/>.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.Or">
            <summary>
            Or condition.
            </summary>
            <remarks>
            Checks if any of the specified conditions is valid.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.OrderType">
            <summary>
            Search result ordering type.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.OrderType.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.OrderType.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.Order">
            <summary>
            Class representing the ordering of search results based on some field's value.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilterType">
            <summary>
            Type of text value filtering.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilterType.TEXT">
            <summary>
            whole text match.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilterType.SINGLE_CHARACTER_WILDCARD">
            <summary>
            A single character wildcard.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilterType.MULTIPLE_CHARACTERS_WILDCARD">
            <summary>
            Multiple characters wildcard.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilter">
            <summary>
            Class representing a part of a search filter used in LIKE condition.
            </summary>
            <remarks>
            When used with <see cref="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilterType.TEXT"/>, represents a part of the search filter that matches the specified value exactly.
            When used with <see cref="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilterType.SINGLE_CHARACTER_WILDCARD"/>, represents a part of the search filter than matches any single character.
            When used with <see cref="F:SoftGear.Strix.Client.Core.Model.Manager.Filter.TextFilterType.MULTIPLE_CHARACTERS_WILDCARD"/>, represents a part of the search filter than matches any number of characters.
            All text comparison is case-sensitive.
            </remarks>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Model.Manager.Filter.Value">
            <summary>
            A class representing a constant value used in search conditions.
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.Node.NodeInfo">
            <summary>
            Data class containing server node information.
            </summary>
        </member>
        <member name="F:SoftGear.Strix.Client.Core.Request.RequestConfig.Timeout">
            <summary>
            Timeout duration for request in milliseconds. (default 30000)
            </summary>
        </member>
        <member name="T:SoftGear.Strix.Client.Core.UID">
            <summary>
            ID that uniquely identifies a communication endpoint.
            </summary>
        </member>
    </members>
</doc>
